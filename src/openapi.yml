openapi: 3.0.1
info:
  title: Paysage-api.
  description: Documentation for the Paysage rest API routes.
  contact:
    email: frederic.olland@enseignementsup.gouv.fr
  license:
    name: MIT
    url: 'https://github.com/dataesr/paysage-api/LICENCE.md'
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
    description: Development server
  - url: 'https://api.paysage.dataesr.ovh'
    description: Preprod server
  - url: 'https://api.paysage.esr.gouv.fr'
    description: Production server

paths:
  '/signup':
    post:
      tags:
        - Authentication
      summary: Sign a user up
      description: Create a user account
      requestBody:
        description: Required user info for account creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signupPayload'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signupResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  '/users/{userId}':
    get:
      tags:
        - Users
      summary: Get a user by id
      description: Create a user account
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: Unique user identifier
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  responses:
    NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: An unexpected error occured on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      title: Error
      type: object
      required:
        - error
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: string
              errorCode:
                type: string

    signupPayload:
      type: object
      required:
        - password
        - email
        - username
      properties:
        password:
          type: string
          pattern: '^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&:_])[A-Za-z\d@$!%*#?&]{8,}$'
          example: Azertyui!87
          description: Minimum eight characters, at least one letter, one number and one special character
        email:
          type: string
          format: email
          example: folland@dataesr.ovh
        username:
          type: string
          example: folland87
        firstName:
          type: string
          example: Frédéric
        lastName:
          type: string
          example: Olland

    signupResponse:
      type: object
      properties:
        message:
          type: string
        accessToken:
          type: string
        refreshToken:
          type: string

    user:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          readOnly: true
          description: User's internal id
        username:
          type: string
          readOnly: true
          pattern: ^[A-Za-z0-9]{3,15}$
          description: User unique identifier.
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
        active:
          type: boolean
          readOnly: true
        avatar:
          type: string
          nullable: true
          readOnly: true
        role:
          type: string
          description: User role
          readOnly: true
          enum:
            - user
            - admin
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        createdBy:
          type: string
          readOnly: true
        updatedBy:
          type: string
          readOnly: true
