openapi: 3.0.1
info:
  title: Paysage-api.
  description: Documentation for the Paysage rest API routes.
  contact:
    email: frederic.olland@enseignementsup.gouv.fr
  license:
    name: MIT
    url: 'https://github.com/dataesr/paysage-api/LICENCE.md'
  version: 1.0.0
servers:
  - url: 'http://localhost:3000/'
paths:
  /categories:
    get:
      tags:
        - Categories
      summary: List categories
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1categories/post/responses/201/content/application~1json/schema'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Categories
      summary: Create a category
      requestBody:
        content:
          application/json:
            schema:
              title: CreateCategory
              type: object
              allOf:
                - $ref: '#/paths/~1categories/post/responses/201/content/application~1json/schema'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: Category
                type: object
                additionalProperties: false
                properties:
                  id:
                    type: string
                    description: Unique identifier.
                    minLength: 1
                    readOnly: true
                  usualNameFr:
                    type: string
                  usualNameEn:
                    type: string
                  longNameEn:
                    type: string
                    description: Nom long en anglais
                    minLength: 1
                  longNameFr:
                    type: string
                    description: Nom usuel en francais
                    minLength: 1
                  shortNameEn:
                    type: string
                    description: Nom court en anglais
                    minLength: 1
                  shortNameFr:
                    type: string
                    description: Nom court en français
                    minLength: 1
                  acronymFr:
                    type: string
                    description: Sigle en français
                    minLength: 1
                  pluralNamelFr:
                    type: string
                    description: Forme du nom usuel français au pluriel
                    minLength: 1
                  femNameFr:
                    type: string
                    description: Forme du nom usuel français au pluriel
                    minLength: 1
                  otherNamesFr:
                    type: array
                    description: Forme du nom usuel français au pluriel
                    items:
                      type: string
                  otherNamesEn:
                    type: array
                    description: Autres intitulés
                    items:
                      type: string
                  descriptionFr:
                    type: string
                    description: Description en français
                    minLength: 1
                  descriptionEn:
                    type: string
                    description: Description en français
                    minLength: 1
                  officialDocumentId:
                    type: string
                    writeOnly: true
                  createdBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  updatedBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}':
    get:
      tags:
        - Categories
      summary: Get a category
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique category id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1categories/post/responses/201/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Categories
      summary: Delete a category
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique category id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Categories
      summary: Update a category
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique category id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateCategory
              type: object
              allOf:
                - $ref: '#/paths/~1categories/post/responses/201/content/application~1json/schema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1categories/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /official-documents:
    get:
      tags:
        - Official Documents
      summary: List official documents
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1official-documents/post/responses/201/content/application~1json/schema'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Official Documents
      summary: Create an official document
      requestBody:
        content:
          application/json:
            schema:
              title: CreateOfficialDocuments
              type: object
              required:
                - nature
                - type
                - title
              allOf:
                - $ref: '#/paths/~1official-documents/post/responses/201/content/application~1json/schema'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: Official Document
                type: object
                description: Document officiel JO ou BO
                additionalProperties: false
                properties:
                  id:
                    type: string
                    readOnly: true
                  nature:
                    type: string
                    enum:
                      - Publication au JO
                      - Publication au BOESR
                  type:
                    type: string
                    enum:
                      - Loi
                      - Décret
                      - Ordonnance
                      - Avis de vacance d'emploi
                      - Arrêté
                      - Circulaire
                  documentNumber:
                    type: string
                  title:
                    type: string
                  signatureDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  startDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  previsionalEndDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  endDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  textExtract:
                    type: string
                  comment:
                    type: string
                  createdBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  updatedBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/official-documents/{officialDocumentId}':
    get:
      tags:
        - Official Documents
      summary: Get an official document
      parameters:
        - name: officialDocumentId
          in: path
          schema:
            type: string
          required: true
          description: Unique official document id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1official-documents/post/responses/201/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Official Documents
      summary: Delete an official document
      parameters:
        - name: officialDocumentId
          in: path
          schema:
            type: string
          required: true
          description: Unique official document id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Official Documents
      summary: Update an official document
      parameters:
        - name: officialDocumentId
          in: path
          schema:
            type: string
          required: true
          description: Unique official document id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateCategory
              type: object
              allOf:
                - $ref: '#/paths/~1official-documents/post/responses/201/content/application~1json/schema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1official-documents/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /structures:
    get:
      tags:
        - Structure
      summary: List structures
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1structures/post/responses/201/content/application~1json/schema'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structure
      summary: Create a Structure
      requestBody:
        content:
          application/json:
            schema:
              title: CreateStructure
              type: object
              allOf:
                - $ref: '#/paths/~1structures/post/responses/201/content/application~1json/schema'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  id:
                    type: string
                    readOnly: true
                  currentName:
                    type: string
                    readOnly: true
                  identifiersCount:
                    type: number
                    readOnly: true
                  descriptionFr:
                    type: string
                  descriptionEn:
                    type: string
                  status:
                    type: string
                    enum:
                      - active
                      - inactive
                      - forthcomming
                  createdBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  updatedBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}':
    get:
      tags:
        - Structure
      summary: Get a structure
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1structures/post/responses/201/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structure
      summary: Delete a structure
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structure
      summary: Update a structure
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateStructure
              type: object
              allOf:
                - $ref: '#/paths/~1structures/post/responses/201/content/application~1json/schema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1structures/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/_status':
    put:
      tags:
        - Structure
      summary: Update structure internal status
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateInternalStatusPayload
              type: object
              allOf:
                - $ref: '#/paths/~1structures~1%7BstructureId%7D~1_status/put/responses/200/content/application~1json/schema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureInternalStatus
                description: Structure Internal Status
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - deleted
                      - draft
                      - redirected
                      - valid
                  targetId:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers':
    get:
      tags:
        - Structure
      summary: List structure identifiers
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1structures~1%7BstructureId%7D~1identifiers/post/responses/201/content/application~1json/schema'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structure
      summary: Create a structure indentifier
      requestBody:
        content:
          application/json:
            schema:
              title: CreateStructureIdentifier
              type: object
              required:
                - type
                - value
                - active
              allOf:
                - $ref: '#/paths/~1structures~1%7BstructureId%7D~1identifiers/post/responses/201/content/application~1json/schema'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: Identifier
                description: 'Identifiant WikiData, IdRef...'
                type: object
                additionalProperties: false
                properties:
                  id:
                    type: integer
                    readOnly: true
                  type:
                    type: string
                    enum:
                      - Wikidata
                      - Identifiant BnF
                      - idRef
                      - ORCID Id
                      - idHal
                      - Numéro national de Thèse
                      - Univ-droit jurist ID
                      - Web of Science Researcher ID
                      - UAI
                      - Siret
                      - GRID
                      - dataESR
                      - orgref
                      - isni
                      - fundref
                      - OpenCorporates ID
                      - PIC (Participant Identification Code)
                      - Référence projet PIA (ANR)
                      - Identifiant CTI de l'école
                      - ROR
                      - RNA
                      - Id unité CNRS
                      - RCR
                      - ISIL
                      - Numéro d'ED
                      - GA OAD
                      - Code Insee
                  value:
                    type: string
                  active:
                    type: boolean
                  startDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  endDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  createdBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  updatedBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers/{identifierId}':
    get:
      tags:
        - Structure
      summary: Get a structure identifier
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: identifierId
          in: path
          schema:
            type: integer
          required: true
          description: Unique identifier id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1structures~1%7BstructureId%7D~1identifiers/post/responses/201/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structure
      summary: Delete a structure identifier
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: identifierId
          in: path
          schema:
            type: integer
          required: true
          description: Unique identifier id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structure
      summary: Update a structure identifier
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: identifierId
          in: path
          schema:
            type: integer
          required: true
          description: Unique identifier id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateStructureIdentifier
              type: object
              allOf:
                - $ref: '#/paths/~1structures~1%7BstructureId%7D~1identifiers/post/responses/201/content/application~1json/schema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1structures~1%7BstructureId%7D~1identifiers/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names':
    get:
      tags:
        - Structure
      summary: List structure names
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1structures~1%7BstructureId%7D~1names/post/responses/201/content/application~1json/schema'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structure
      summary: Create a structure name
      requestBody:
        content:
          application/json:
            schema:
              title: CreateStructureName
              type: object
              required:
                - usualName
                - main
              allOf:
                - $ref: '#/paths/~1structures~1%7BstructureId%7D~1names/post/responses/201/content/application~1json/schema'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: Structure Names
                description: Différentes dénominations d'une structure
                type: object
                additionalProperties: false
                properties:
                  id:
                    type: integer
                    readOnly: true
                  officialName:
                    type: string
                  usualName:
                    type: string
                  shortName:
                    type: string
                  brandName:
                    type: string
                  nameEn:
                    type: string
                  acronymFr:
                    type: string
                  acronymEn:
                    type: string
                  otherName:
                    type: array
                    items:
                      type: string
                  main:
                    type: boolean
                  startDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  endDate:
                    type: string
                    pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  comment:
                    type: string
                  article:
                    type: string
                    enum:
                      - à l'
                      - à
                      - à la
                      - dans le
                      - dans les
                      - aux
                      - au
                  createdBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  updatedBy:
                    type: object
                    readOnly: true
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      avatar:
                        type: string
                        format: uri
                  createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                  updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names/{nameId}':
    get:
      tags:
        - Structure
      summary: Get a structure name
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: nameId
          in: path
          schema:
            type: integer
          required: true
          description: Unique name id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1structures~1%7BstructureId%7D~1names/post/responses/201/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structure
      summary: Delete a structure name
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: nameId
          in: path
          schema:
            type: integer
          required: true
          description: Unique name id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structure
      summary: Update a structure name
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: nameId
          in: path
          schema:
            type: integer
          required: true
          description: Unique name id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateStructureName
              type: object
              allOf:
                - $ref: '#/paths/~1structures~1%7BstructureId%7D~1names/post/responses/201/content/application~1json/schema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1structures~1%7BstructureId%7D~1names/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    filter:
      name: filters
      in: query
      description: A filtering object
      style: deepObject
      schema:
        type: object
        description: '?filters[lastName][$eq]=Dupond&filters[lastName][$neq]=Dupont'
    skip:
      name: skip
      in: query
      description: number of items to skip
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: max records to return
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: Sort returned data
      schema:
        type: string
        description: '?sort=firstname,-createdAt'
  responses:
    BadRequest:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentification needed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Permission denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: An unexpected error occured on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Redirected:
      description: Ressource has been redirected to another id
      content:
        application/json:
          schema:
            title: Redirected
            type: object
            required:
              - message
              - location
            additionalProperties: false
            properties:
              message:
                type: string
              location:
                type: string
                format: uri
  schemas:
    Error:
      title: Error
      type: object
      required:
        - error
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: string
              errorCode:
                type: string
