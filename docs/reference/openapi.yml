openapi: 3.0.1
info:
  title: Paysage API.
  description: Documentation for the Paysage rest API routes.
  contact:
    email: frederic.olland@enseignementsup.gouv.fr
  license:
    name: MIT
    url: 'https://github.com/dataesr/paysage-api/LICENCE.md'
  version: 1.0.0
servers:
  - url: 'https://api.paysage.staging.dataesr.ovh/'
    description: Staging server
  - url: 'https://api.paysage.dataesr.ovh/'
    description: Production server
  - url: 'http://localhost:3000/'
    description: Development server
tags:
  - name: Structures
    description: Operation for the Structure object.
  - name: Persons
    description: Operation for the Peron object.
  - name: Categories
    description: Operation for the Category object.
  - name: Official Documents
    description: Operation for the OfficialDocuments object.
  - name: Legal Categories
    description: Operation for the LegalCategories object.
  - name: Events
    description: Access event logs  of object changes.
paths:
  /events:
    get:
      tags:
        - Events
      summary: List event logs
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Events'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /categories:
    get:
      tags:
        - Categories
      summary: List categories
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Category'
                        - $ref: '#/components/schemas/Metas'
                        - type: object
                          properties:
                            officialDocument:
                              $ref: '#/components/schemas/OfficialDocument'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Categories
      summary: Create a category
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              title: CreateCategory
              type: object
              allOf:
                - $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: CategoryResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/Metas'
                  - type: object
                    properties:
                      officialDocument:
                        $ref: '#/components/schemas/OfficialDocument'
                      parents:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}':
    get:
      tags:
        - Categories
      summary: Get a category
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique category id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: CategoryResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/Metas'
                  - type: object
                    properties:
                      officialDocument:
                        $ref: '#/components/schemas/OfficialDocument'
                      parents:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Categories
      summary: Delete a category
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique category id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Categories
      summary: Update a category
      security:
        - BearerAuth: []
      parameters:
        - name: categoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique category id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateCategory
              type: object
              allOf:
                - $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: CategoryResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/Metas'
                  - type: object
                    properties:
                      officialDocument:
                        $ref: '#/components/schemas/OfficialDocument'
                      parents:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /prices:
    get:
      tags:
        - Prices
      summary: List prices
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1prices/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Prices
      summary: Create a price
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              title: PriceWriteSchema
              description: Object d√©crivant un prix scientifique
              type: object
              properties:
                nameFr:
                  type: string
                nameEn:
                  type: string
                descriptionFr:
                  type: string
                descriptionEn:
                  type: string
                parentIds:
                  type: array
                  description: Identifiants des prix parents
                  items:
                    type: string
                    pattern: '^[a-zA-Z0-9]{5}$'
                startDate:
                  type: string
                  nullable: true
                  pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                endDate:
                  type: string
                  nullable: true
                  pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: PriceReadSchema
                description: Object d√©crivant un prix scientifique
                required:
                  - id
                allOf:
                  - type: object
                    properties:
                      id:
                        type: integer
                        pattern: '^[a-zA-Z0-9]{5}$'
                        readOnly: true
                      nameFr:
                        type: string
                      nameEn:
                        type: string
                      descriptionFr:
                        type: string
                      descriptionEn:
                        type: string
                      parents:
                        type: array
                        description: Identifiants des prix parents
                        items:
                          title: Price
                          description: Object d√©crivant un prix scientifique
                          type: object
                          properties:
                            id:
                              type: integer
                              pattern: '^[a-zA-Z0-9]{5}$'
                              readOnly: true
                            nameFr:
                              type: string
                            nameEn:
                              type: string
                      startDate:
                        type: string
                        nullable: true
                        pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                      endDate:
                        type: string
                        nullable: true
                        pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/prices/{priceId}':
    get:
      tags:
        - Prices
      summary: Get a price
      parameters:
        - name: priceId
          in: path
          schema:
            type: string
          required: true
          description: Unique price id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1prices/post/responses/201/content/application~1json/schema'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Prices
      summary: Delete a price
      security:
        - BearerAuth: []
      parameters:
        - name: priceId
          in: path
          schema:
            type: string
          required: true
          description: Unique price id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Prices
      summary: Update a price
      security:
        - BearerAuth: []
      parameters:
        - name: priceId
          in: path
          schema:
            type: string
          required: true
          description: Unique price id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/paths/~1prices/post/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1prices/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /official-documents:
    get:
      tags:
        - Official Documents
      summary: List official documents
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/OfficialDocument'
                        - $ref: '#/components/schemas/Metas'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Official Documents
      summary: Create an official document
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              title: CreateOfficialDocumentPayload
              type: object
              allOf:
                - $ref: '#/components/schemas/OfficialDocument'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: OfficialDocumentResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/OfficialDocument'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/official-documents/{officialDocumentId}':
    get:
      tags:
        - Official Documents
      summary: Get an official document
      parameters:
        - name: officialDocumentId
          in: path
          schema:
            type: string
          required: true
          description: Unique official document id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: OfficialDocumentResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/OfficialDocument'
                  - $ref: '#/components/schemas/Metas'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Official Documents
      summary: Delete an official document
      security:
        - BearerAuth: []
      parameters:
        - name: officialDocumentId
          in: path
          schema:
            type: string
          required: true
          description: Unique official document id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Official Documents
      summary: Update an official document
      security:
        - BearerAuth: []
      parameters:
        - name: officialDocumentId
          in: path
          schema:
            type: string
          required: true
          description: Unique official document id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateOfficialDocumentPayload
              type: object
              allOf:
                - $ref: '#/components/schemas/OfficialDocument'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: OfficialDocumentResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/OfficialDocument'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /legal-categories:
    get:
      tags:
        - Legal Categories
      summary: List legal categories
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/LegalCategory'
                        - $ref: '#/components/schemas/Metas'
                        - type: object
                          properties:
                            officialDocument:
                              $ref: '#/components/schemas/OfficialDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Legal Categories
      summary: Create a legal category
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              title: CreateLegalCategoryPayload
              type: object
              allOf:
                - $ref: '#/components/schemas/LegalCategory'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: LegalCategoryResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/LegalCategory'
                  - $ref: '#/components/schemas/Metas'
                  - type: object
                    properties:
                      officialDocument:
                        $ref: '#/components/schemas/OfficialDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/legal-categories/{legalCategoryId}':
    get:
      tags:
        - Legal Categories
      summary: Get a legal category
      parameters:
        - name: legalCategoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique legal category id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: LegalCategoryResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/LegalCategory'
                  - $ref: '#/components/schemas/Metas'
                  - type: object
                    properties:
                      officialDocument:
                        $ref: '#/components/schemas/OfficialDocument'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Legal Categories
      summary: Delete a legal category
      security:
        - BearerAuth: []
      parameters:
        - name: legalCategoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique legal category id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Legal Categories
      summary: Update a legal category
      security:
        - BearerAuth: []
      parameters:
        - name: legalCategoryId
          in: path
          schema:
            type: string
          required: true
          description: Unique legal category id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateLegalCategoryPayload
              type: object
              allOf:
                - $ref: '#/components/schemas/LegalCategory'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: LegalCategoryResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/LegalCategory'
                  - $ref: '#/components/schemas/Metas'
                  - type: object
                    properties:
                      officialDocument:
                        $ref: '#/components/schemas/OfficialDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /persons:
    get:
      tags:
        - Persons
      summary: List persons
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Person'
                        - $ref: '#/components/schemas/Metas'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Persons
      summary: Create a person
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              title: UpdatePersonPayload
              required:
                - lastName
              allOf:
                - $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: StructureNameResponse
                allOf:
                  - $ref: '#/components/schemas/Person'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}':
    get:
      tags:
        - Persons
      summary: Get a person
      parameters:
        - name: personId
          in: path
          schema:
            type: string
          required: true
          description: Unique person id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: PersonResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/Person'
                  - $ref: '#/components/schemas/Metas'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Persons
      summary: Delete a person
      security:
        - BearerAuth: []
      parameters:
        - name: personId
          in: path
          schema:
            type: string
          required: true
          description: Unique person id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Persons
      summary: Update a person
      security:
        - BearerAuth: []
      parameters:
        - name: personId
          in: path
          schema:
            type: string
          required: true
          description: Unique person id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdatePersonPayload
              allOf:
                - $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: PersonResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/Person'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /structures:
    get:
      tags:
        - Structures
      summary: List structures
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Structure'
                        - $ref: '#/components/schemas/Metas'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Create a Structure
      requestBody:
        content:
          application/json:
            schema:
              title: CreateStructure
              type: object
              properties:
                structureStatus:
                  type: string
                  enum:
                    - active
                    - inactive
                    - forthcoming
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: StructureResponse
                allOf:
                  - $ref: '#/components/schemas/Structure'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}':
    get:
      tags:
        - Structures
      summary: Get a structure
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/Structure'
                  - $ref: '#/components/schemas/Metas'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: Delete a structure
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Update a structure
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateStructurePayload
              type: object
              additionalProperties: false
              properties:
                currentNameId:
                  type: integer
                  nullable: true
                structureStatus:
                  type: string
                  enum:
                    - active
                    - inactive
                    - forthcoming
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/Structure'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/status':
    put:
      tags:
        - Structures
      summary: Change the structure status
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Structure Internal Status
              properties:
                status:
                  type: string
                  enum:
                    - deleted
                    - draft
                    - redirected
                    - published
                redirection:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers':
    get:
      tags:
        - Structures
      summary: List structure identifiers
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/StructureIdentifier'
                        - $ref: '#/components/schemas/Metas'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Create a structure indentifier
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      requestBody:
        content:
          application/json:
            schema:
              title: CreateStructureIdentifier
              type: object
              required:
                - type
                - value
                - active
              allOf:
                - $ref: '#/components/schemas/StructureIdentifier'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: StructureIdentifierResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureIdentifier'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers/{identifierId}':
    get:
      tags:
        - Structures
      summary: Get a structure identifier
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: identifierId
          in: path
          schema:
            type: integer
          required: true
          description: Unique identifier id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureIdentifierResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureIdentifier'
                  - $ref: '#/components/schemas/Metas'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: Delete a structure identifier
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: identifierId
          in: path
          schema:
            type: integer
          required: true
          description: Unique identifier id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Update a structure identifier
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: identifierId
          in: path
          schema:
            type: integer
          required: true
          description: Unique identifier id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateStructureIdentifierPayload
              type: object
              allOf:
                - $ref: '#/components/schemas/StructureIdentifier'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureIdentifierResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureIdentifier'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names':
    get:
      tags:
        - Structures
      summary: List structure names
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/StructureName'
                        - $ref: '#/components/schemas/Metas'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Create a structure name
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      requestBody:
        content:
          application/json:
            schema:
              title: CreateStructureName
              type: object
              required:
                - usualName
              allOf:
                - $ref: '#/components/schemas/StructureName'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: StructureNameResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureName'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names/{nameId}':
    get:
      tags:
        - Structures
      summary: Get a structure name
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: nameId
          in: path
          schema:
            type: integer
            format: int32
          required: true
          description: Unique name id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureNameResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureName'
                  - $ref: '#/components/schemas/Metas'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: Delete a structure name
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: nameId
          in: path
          schema:
            type: integer
          required: true
          description: Unique name id
      responses:
        '204':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Update a structure name
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: nameId
          in: path
          schema:
            type: integer
          required: true
          description: Unique name id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateStructureNamePayload
              type: object
              allOf:
                - $ref: '#/components/schemas/StructureName'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureNameResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureName'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/localisations':
    get:
      tags:
        - Structures
      summary: List structure localisations
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      allOf:
                        - $ref: '#/components/schemas/StructureLocalisation'
                        - $ref: '#/components/schemas/Metas'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Create a structure localisation
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
      requestBody:
        content:
          application/json:
            schema:
              title: CreateStructureLocalisation
              type: object
              required:
                - address
              allOf:
                - $ref: '#/components/schemas/StructureLocalisation'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: StructureLocalisationResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureLocalisation'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/localisations/{localisationId}':
    get:
      tags:
        - Structures
      summary: Get a structure localisation
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: localisationId
          in: path
          schema:
            type: integer
          required: true
          description: Unique localisation id
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureLocalisationResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureLocalisation'
                  - $ref: '#/components/schemas/Metas'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: Delete a structure localisation
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: localisationId
          in: path
          schema:
            type: integer
          required: true
          description: Unique localisation id
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Update a structure localisation
      security:
        - BearerAuth: []
      parameters:
        - name: structureId
          in: path
          schema:
            type: string
          required: true
          description: Unique structure id
        - name: localisationId
          in: path
          schema:
            type: integer
          required: true
          description: Unique localisation id
      requestBody:
        content:
          application/json:
            schema:
              title: UpdateStructureLocalisationPayload
              type: object
              allOf:
                - $ref: '#/components/schemas/StructureLocalisation'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: StructureLocalisationResponse
                type: object
                allOf:
                  - $ref: '#/components/schemas/StructureLocalisation'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    filter:
      name: filters
      in: query
      description: A filtering object
      style: deepObject
      schema:
        type: object
        description: '?filters[lastName][$eq]=Dupond&filters[lastName][$neq]=Dupont'
    skip:
      name: skip
      in: query
      description: number of items to skip
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: max records to return
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: Sort returned data
      schema:
        type: string
        description: '?sort=firstname,-createdAt'
  responses:
    BadRequest:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentification needed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Permission denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: An unexpected error occured on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      title: Error
      type: object
      required:
        - error
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: string
              errorCode:
                type: string
    Metas:
      title: Metas
      type: object
      description: Object metadatas
      properties:
        createdBy:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              nullable: true
            username:
              type: string
              nullable: true
            avatar:
              type: string
              format: uri
              nullable: true
        updatedBy:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              nullable: true
            username:
              type: string
              nullable: true
            avatar:
              type: string
              format: uri
              nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
    Structure:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        structureStatus:
          type: string
          nullable: true
          enum:
            - active
            - inactive
            - forthcoming
            - null
        alternativePaysageIds:
          type: array
          readOnly: true
          items:
            type: string
        status:
          type: string
          readOnly: true
          enum:
            - draft
            - published
            - redirected
            - deleted
        redirection:
          type: string
          readOnly: true
          nullable: true
        currentName:
          $ref: '#/components/schemas/StructureName'
    StructureName:
      type: object
      description: Diff√©rentes d√©nominations d'une structure
      properties:
        id:
          type: integer
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        structureId:
          type: string
          readOnly: true
        officialName:
          type: string
          nullable: true
        usualName:
          type: string
          nullable: true
        shortName:
          type: string
          nullable: true
        brandName:
          type: string
          nullable: true
        nameEn:
          type: string
          nullable: true
        acronymFr:
          type: string
          nullable: true
        acronymEn:
          type: string
          nullable: true
        otherName:
          type: array
          nullable: true
          items:
            type: string
        startDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        endDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        comment:
          type: string
          nullable: true
        article:
          type: string
          nullable: true
          enum:
            - √† l'
            - √†
            - √† la
            - dans le
            - dans les
            - aux
            - au
    StructureIdentifier:
      title: Identifier
      description: 'Identifiant WikiData, IdRef...'
      type: object
      properties:
        id:
          type: integer
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        structureId:
          type: string
          readOnly: true
        type:
          type: string
          enum:
            - Wikidata
            - Identifiant BnF
            - idRef
            - ORCID Id
            - idHal
            - Num√©ro national de Th√®se
            - Univ-droit jurist ID
            - Web of Science Researcher ID
            - UAI
            - Siret
            - GRID
            - dataESR
            - orgref
            - isni
            - fundref
            - OpenCorporates ID
            - PIC (Participant Identification Code)
            - R√©f√©rence projet PIA (ANR)
            - Identifiant CTI de l'√©cole
            - ROR
            - RNA
            - Id unit√© CNRS
            - RCR
            - ISIL
            - Num√©ro d'ED
            - GA OAD
            - Code Insee
        value:
          type: string
        active:
          type: boolean
        startDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        endDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
    StructureLocalisation:
      title: Localisation
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
        structureId:
          type: string
          readOnly: true
        cityFrId:
          type: string
          nullable: true
        inseeId:
          type: string
          nullable: true
        cityForeignId:
          type: string
          nullable: true
        distributionStatement:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        postbox:
          type: string
          nullable: true
        zipcode:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        geometry:
          type: object
          nullable: true
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number
        startDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        endDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
    Category:
      title: Category
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          description: Unique identifier.
          minLength: 1
          readOnly: true
        usualNameFr:
          type: string
        usualNameEn:
          type: string
        longNameEn:
          type: string
          description: Nom long en anglais
          minLength: 1
        longNameFr:
          type: string
          description: Nom usuel en francais
          minLength: 1
        shortNameEn:
          type: string
          description: Nom court en anglais
          minLength: 1
        shortNameFr:
          type: string
          description: Nom court en fran√ßais
          minLength: 1
        acronymFr:
          type: string
          description: Sigle en fran√ßais
          minLength: 1
        pluralNamelFr:
          type: string
          description: Forme du nom usuel fran√ßais au pluriel
          minLength: 1
        femNameFr:
          type: string
          description: Forme du nom usuel fran√ßais au pluriel
          minLength: 1
        otherNamesFr:
          type: array
          description: Forme du nom usuel fran√ßais au pluriel
          items:
            type: string
        otherNamesEn:
          type: array
          description: Autres intitul√©s
          items:
            type: string
        descriptionFr:
          type: string
          description: Description en fran√ßais
          minLength: 1
        descriptionEn:
          type: string
          description: Description en fran√ßais
          minLength: 1
        officialDocumentId:
          type: string
          writeOnly: true
        parentIds:
          type: array
          writeOnly: true
          description: Liste d'identifiant de cat√©gories parente
          items:
            type: string
    OfficialDocument:
      title: Official Document
      description: Document officiel JO ou BO
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        nature:
          type: string
          enum:
            - Publication au JO
            - Publication au BOESR
        type:
          type: string
          enum:
            - Loi
            - D√©cret
            - Ordonnance
            - Avis de vacance d'emploi
            - Arr√™t√©
            - Circulaire
        documentNumber:
          type: string
        title:
          type: string
        pageUrl:
          type: string
          format: uri
        signatureDate:
          type: string
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        startDate:
          type: string
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        previsionalEndDate:
          type: string
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        endDate:
          type: string
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        textExtract:
          type: string
        comment:
          type: string
    LegalCategory:
      title: Legal Category
      description: Cat√©gory juridique
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        inseeCode:
          type: string
        longNameFr:
          type: string
        shortNameFr:
          type: string
        acronymeFr:
          type: string
        pluralNameFr:
          type: string
        descriptionFr:
          type: string
        longNameEn:
          type: string
        shortNameEn:
          type: string
        otherNames:
          type: array
          items:
            type: string
        sector:
          type: string
          enum:
            - public
            - priv√©
            - sans objet
        officialDocumentId:
          type: string
          writeOnly: true
        legalPersonality:
          type: string
          enum:
            - personne morale de droit public
            - personne morale de droit priv√©
            - organisation internationale
            - autre forme juridique √©trang√®re
            - sans personalit√© juridique
        inPublicResearch:
          type: boolean
        wikidataId:
          type: string
        websiteFr:
          type: string
        websiteEn:
          type: string
        comment:
          type: string
    Events:
      type: object
      properties:
        user:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            username:
              type: string
            avatar:
              type: string
              format: uri
              nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        resourceUri:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        resourceId:
          type: string
          nullable: true
        resourceType:
          type: string
          nullable: true
        subResourceId:
          type: integer
          nullable: true
        subResourceType:
          type: string
          nullable: true
        prevState:
          type: object
          nullable: true
        nextState:
          type: object
          nullable: true
    Person:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        otherName:
          type: array
          items:
            type: string
        gender:
          type: string
          nullable: true
          enum:
            - Homme
            - Femme
            - Autre
        birthDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        deathDate:
          type: string
          nullable: true
          pattern: '^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$'
        activity:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Authentication with a Bearer token.
