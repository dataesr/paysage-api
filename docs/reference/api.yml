openapi: 3.0.1
info:
  title: API
  description: Documentation for the Paysage rest API routes.
  contact:
    email: frederic.olland@enseignementsup.gouv.fr
  license:
    name: MIT
    url: 'https://github.com/dataesr/paysage-api/LICENCE.md'
  version: 1.0.0
servers:
  - url: 'https://api.paysage.staging.dataesr.ovh/'
    description: Staging server
  - url: 'https://api.paysage.dataesr.ovh/'
    description: Production server
  - url: 'http://localhost:3000/'
    description: Development server
tags:
  - name: Structures
    description: Operations on structures.
  - name: Structures - Names
    description: Operations on structure's names.
  - name: Structures - Identifiers
    description: Operations on structure's identifiers.
  - name: Structures - Weblinks
    description: Operations on structure's weblinks.
  - name: Structures - SocialMedias
    description: Operations on structure's social medias.
  - name: Structures - Localisations
    description: Operations on structure's localisations.
  - name: Structures - Logos
    description: Operations on structure's logos.
  - name: Persons
    description: Operations on persons.
  - name: Persons - Identifiers
    description: Operations on person's identifiers.
  - name: Persons - SocialMedias
    description: Operations on person's social medias.
  - name: Persons - Weblinks
    description: Operations on person's weblinks.
  - name: Categories
    description: Operations on Categories.
  - name: Categories - Identifiers
    description: Operations on Categories' identifiers.
  - name: Categories - Weblinks
    description: Operations on Categories' weblinks.
  - name: Terms
    description: Operation for the Term object.
  - name: Official Documents
    description: Operation for the OfficialDocument object.
  - name: Legal Categories
    description: Operation for the LegalCategorie object.
  - name: Prices
    description: Operation for the Price object.
  - name: Project
    description: Operation for the Project object.
  - name: Events
    description: Access event logs of object changes.
paths:
  /events:
    get:
      tags:
        - Events
      summary: List event logs
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/Events'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /categories:
    get:
      tags:
        - Categories
      summary: List categories
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Categories
      summary: Create a category
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              title: CreateCategory
              type: object
              required:
                - usualNameFr
              allOf:
                - $ref: '#/components/schemas/CategoryPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}':
    get:
      tags:
        - Categories
      summary: Category - Get a category
      parameters:
        - $ref: '#/components/parameters/categoryId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Categories
      summary: Category - Delete a category
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Categories
      summary: Category - Update a category
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Categories
      summary: Category - Create a category with ID.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/identifiers':
    get:
      tags:
        - Categories
      summary: Identifiers - List identifiers
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Identifier'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Categories
      summary: Identifiers - Create an indentifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureIdentifierPayLoad
              type: object
              required:
                - type
                - value
                - active
              allOf:
                - $ref: '#/components/schemas/IdentifierPayLoad'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/identifiers/{identifierId}':
    get:
      tags:
        - Categories
      summary: Identifier - Get an identifier
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Categories
      summary: Identifier - Delete an identifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Categories
      summary: Identifier - Update an identifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/identifierId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentifierPayLoad'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/weblinks':
    get:
      tags:
        - Categories
      summary: Weblinks - List structure weblinks
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Weblink'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Categories
      summary: Weblinks - Create a structure weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureWeblinkPayLoad
              type: object
              required:
                - type
                - url
              allOf:
                - $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/weblinks/{weblinkId}':
    get:
      tags:
        - Categories
      summary: Weblink - Get a weblink
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Categories
      summary: Weblink - Delete a weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Categories
      summary: Weblink - Update a weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/weblinkId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /prices:
    get:
      tags:
        - Prices
      summary: Prices - List prices
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Prices
      summary: Prices - Create a price
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricePayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/prices/{priceId}':
    get:
      tags:
        - Prices
      summary: Price - Get a price
      parameters:
        - $ref: '#/components/parameters/priceId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Prices
      summary: Price - Delete a price
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/priceId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Prices
      summary: Price - Update a price
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/priceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricePayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /terms:
    get:
      tags:
        - Terms
      summary: Terms - List terms
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Term'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Terms
      summary: Terms - Create a term
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/terms/{termId}':
    get:
      tags:
        - Terms
      summary: Term - Get a term
      parameters:
        - $ref: '#/components/parameters/termId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Terms
      summary: Term - Delete a term
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/termId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Terms
      summary: Term - Update a term
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/termId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /officialdocuments:
    get:
      tags:
        - Official Documents
      summary: List official documents
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OfficialDocument'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Official Documents
      summary: Create an official document
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - nature
                - type
                - title
                - documentNumber
                - pageUrl
              allOf:
                - $ref: '#/components/schemas/OfficialDocumentPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficialDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/officialdocuments/{officialDocumentId}':
    get:
      tags:
        - Official Documents
      summary: Get an official document
      parameters:
        - $ref: '#/components/parameters/officialDocumentId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficialDocument'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Official Documents
      summary: Delete an official document
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/officialDocumentId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Official Documents
      summary: Update an official document
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/officialDocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfficialDocumentPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficialDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /legalcategories:
    get:
      tags:
        - Legal Categories
      summary: List legal categories
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LegalCategory'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Legal Categories
      summary: Create a legal category
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - longNameFr
              allOf:
                - $ref: '#/components/schemas/LegalCategoryPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                title: LegalCategoryResponse
                required:
                  - id
                allOf:
                  - $ref: '#/components/schemas/LegalCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/legalcategories/{legalCategoryId}':
    get:
      tags:
        - Legal Categories
      summary: Get a legal category
      parameters:
        - $ref: '#/components/parameters/legalCategoryId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalCategory'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Legal Categories
      summary: Delete a legal category
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/legalCategoryId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Legal Categories
      summary: Update a legal category
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/legalCategoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalCategoryPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /persons:
    get:
      tags:
        - Persons
      summary: List persons
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Persons
      summary: Create a person
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - lastName
              allOf:
                - $ref: '#/components/schemas/PersonPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}':
    get:
      tags:
        - Persons
      summary: Get a person
      parameters:
        - $ref: '#/components/parameters/personId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Persons
      summary: Delete a person
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Persons
      summary: Update a person
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/identifiers':
    get:
      tags:
        - Persons
      summary: Identifiers - List identifiers
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Identifier'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Persons
      summary: Identifiers - Add an indentifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              title: IdentifierPayLoad
              type: object
              required:
                - type
                - value
                - active
              allOf:
                - $ref: '#/components/schemas/IdentifierPayLoad'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/identifiers/{identifierId}':
    get:
      tags:
        - Persons
      summary: Identifier - Get an identifier
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Persons
      summary: Identifier - Delete an identifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Persons
      summary: Identifier - Update an identifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/identifierId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentifierPayLoad'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/weblinks':
    get:
      tags:
        - Persons
      summary: Weblinks - List weblinks
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Weblink'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Persons
      summary: Weblinks - Create a weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              title: WeblinkPayLoad
              type: object
              required:
                - type
                - url
              allOf:
                - $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/weblinks/{weblinkId}':
    get:
      tags:
        - Persons
      summary: Weblink - Get a weblink
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Persons
      summary: Weblink - Delete a weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Persons
      summary: Weblink - Update a weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/weblinkId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/socials':
    get:
      tags:
        - Persons
      summary: SocialMedias - List social medias
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SocialMedia'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Persons
      summary: SocialMedias - Create a social media
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              title: SocialMediaPayLoad
              type: object
              required:
                - type
                - account
              allOf:
                - $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/socials/{socialmediaId}':
    get:
      tags:
        - Persons
      summary: SocialMedia - Get a social media
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Persons
      summary: SocialMedia - Delete a social media
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Persons
      summary: SocialMedia - Update a social media
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/socialmediaId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /documents:
    get:
      tags:
        - Documents
      summary: List Documents
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Documents
      summary: Create a document
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - title
                - file
              allOf:
                - $ref: '#/components/schemas/DocumentPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/documents/{documentId}':
    get:
      tags:
        - Documents
      summary: Get a document
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Documents
      summary: Delete a document
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Documents
      summary: Update a document
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /structures:
    get:
      tags:
        - Structures
      summary: Structures - List structures
      parameters:
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Structure'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Structures - Create a Structure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructurePayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}':
    get:
      tags:
        - Structures
      summary: Structure - Get a structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: Structure - Delete a structure
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Structure - Update a structure
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructurePayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Structures
      summary: Structure - Create a structure with ID.
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructurePayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/status':
    put:
      tags:
        - Structures
      summary: Status - Change the structure status
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureStatusPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers':
    get:
      tags:
        - Structures - Identifiers
      summary: List all structure's identifiers
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Identifier'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Identifiers
      summary: Add a new identifier to a structure
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureIdentifierPayLoad
              type: object
              required:
                - type
                - value
                - active
              allOf:
                - $ref: '#/components/schemas/IdentifierPayLoad'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers/{identifierId}':
    get:
      tags:
        - Structures - Identifiers
      summary: Get a structure identifier
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Identifiers
      summary: Remove a structure identifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Identifiers
      summary: Update a structure identifier
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/identifierId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentifierPayLoad'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names':
    get:
      tags:
        - Structures
      summary: Names- List structure names
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StructureName'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Names- Create a structure name
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureNamePayload
              type: object
              required:
                - usualName
              allOf:
                - $ref: '#/components/schemas/StructureNamePayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureName'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names/{nameId}':
    get:
      tags:
        - Structures
      summary: Name - Get a structure name
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/nameId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureName'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: Name - Delete a structure name
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/nameId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Name - Update a structure name
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/nameId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureNamePayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureName'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/localisations':
    get:
      tags:
        - Structures - Localisations
      summary: List all structure's localisations
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StructureLocalisation'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Localisations
      summary: Add a new localisation to a structure
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureLocalisationPayload
              type: object
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/StructureLocalisationPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureLocalisation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/localisations/{localisationId}':
    get:
      tags:
        - Structures - Localisations
      summary: Get a structure localisation
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/localisationId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureLocalisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Localisations
      summary: Remove a structure localisation
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/localisationId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Localisations
      summary: Update a structure localisation
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/localisationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureLocalisationPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureLocalisation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/weblinks':
    get:
      tags:
        - Structures
      summary: Weblinks - List structure weblinks
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Weblink'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Weblinks - Create a structure weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureWeblinkPayLoad
              type: object
              required:
                - type
                - url
              allOf:
                - $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/weblinks/{weblinkId}':
    get:
      tags:
        - Structures
      summary: Weblink - Get a structure weblink
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: Weblink - Delete a structure weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Weblink - Update a structure weblink
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/weblinkId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/socials':
    get:
      tags:
        - Structures
      summary: SocialMedias - List structure social medias
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SocialMedia'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: SocialMedias - Create a structure social media
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureSocialMediaPayLoad
              type: object
              required:
                - type
                - account
              allOf:
                - $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/socials/{socialmediaId}':
    get:
      tags:
        - Structures
      summary: SocialMedia - Get a structure social media
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures
      summary: SocialMedia - Delete a structure social media
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: SocialMedia - Update a structure social media
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/socialmediaId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/logos':
    get:
      tags:
        - Structures - Logos
      summary: List all structures's logos
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/paths/~1structures~1%7BstructureId%7D~1logos/post/responses/201/content/application~1json/schema'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Logos
      summary: Add a new logo to structure
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              title: LogoPayload
              type: object
              required:
                - file
              allOf:
                - $ref: '#/paths/~1structures~1%7BstructureId%7D~1logos~1%7BlogoId%7D/patch/requestBody/content/application~1json/schema'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                description: Representation d'un logo de structure
                required:
                  - id
                allOf:
                  - type: object
                    properties:
                      id:
                        type: string
                        description: Unique identifier
                        pattern: '^[a-zA-Z0-9]{8}$'
                      rid:
                        type: string
                        description: Unique identifier
                        pattern: '^[a-zA-Z0-9]{5}$'
                      url:
                        type: string
                        nullable: true
                      path:
                        type: string
                        nullable: true
                      mimetype:
                        type: string
                        nullable: true
                      originalName:
                        type: string
                        nullable: true
                  - $ref: '#/paths/~1structures~1%7BstructureId%7D~1logos~1%7BlogoId%7D/patch/requestBody/content/application~1json/schema'
                  - $ref: '#/components/schemas/Metas'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/logos/{logoId}':
    get:
      tags:
        - Structures - Logos
      summary: Get a structure logo
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/logoId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/paths/~1structures~1%7BstructureId%7D~1logos/post/responses/201/content/application~1json/schema'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Logos
      summary: Remove a structure logo
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/logoId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Logos
      summary: Update a structure logo
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/logoId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Différentes logos d'une structure
              properties:
                legend:
                  type: string
                  nullable: true
                credits:
                  type: string
                  nullable: true
                license:
                  type: string
                  enum:
                    - CC BY
                    - CC BY-SA
                    - CC BY-ND
                    - CC BY-NC
                    - CC BY-NC-SA
                    - CC BY-NC-ND
                    - null
                  nullable: true
                startDate:
                  type: string
                  nullable: true
                  pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
                endDate:
                  type: string
                  nullable: true
                  pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
                comment:
                  type: string
                  nullable: true
                file:
                  writeOnly: true
                  type: string
                  format: binary
      responses:
        '200':
          description: Success
          content:
            multipart/form-data:
              schema:
                $ref: '#/paths/~1structures~1%7BstructureId%7D~1logos/post/responses/201/content/application~1json/schema'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    filter:
      name: filters
      in: query
      description: A filtering object
      style: deepObject
      schema:
        type: object
        description: '?filters[lastName][$eq]=Dupond&filters[lastName][$neq]=Dupont'
    skip:
      name: skip
      in: query
      description: number of items to skip
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: max records to return
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: Sort returned data
      schema:
        type: string
        description: '?sort=firstname,-createdAt'
    documentId:
      name: documentId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique resource identifier
    structureId:
      name: structureId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique structure id
    nameId:
      name: nameId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique name id
    logoId:
      name: logoId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique logo identifier
    identifierId:
      name: identifierId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique identifier id
    localisationId:
      name: localisationId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique localisation id
    weblinkId:
      name: weblinkId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique weblink id
    socialmediaId:
      name: socialmediaId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique social media id
    termId:
      name: termId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique term id
    categoryId:
      name: categoryId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique category id
    legalCategoryId:
      name: legalCategoryId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique legal category id
    priceId:
      name: priceId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique price id
    personId:
      name: personId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique person id
    officialDocumentId:
      name: officialDocumentId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique official document id
  responses:
    BadRequest:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentification needed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Permission denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: An unexpected error occured on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      title: Error
      type: object
      required:
        - error
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: string
              errorCode:
                type: string
    Metas:
      title: Metas
      type: object
      description: Object metadatas
      properties:
        createdBy:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              nullable: true
            username:
              type: string
              nullable: true
            avatar:
              type: string
              format: uri
              nullable: true
        updatedBy:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              nullable: true
            username:
              type: string
              nullable: true
            avatar:
              type: string
              format: uri
              nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
    StructurePayload:
      type: object
      properties:
        structureStatus:
          type: string
          nullable: true
          enum:
            - active
            - inactive
            - forthcoming
            - null
        creationDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        creationOfficialDocumentId:
          type: string
          description: Unique officialDocument identifier
          pattern: '^[a-zA-Z0-9]{8}$'
          nullable: true
        closureDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        closureOfficialDocumentId:
          type: string
          description: Unique officialDocument identifier
          pattern: '^[a-zA-Z0-9]{8}$'
          nullable: true
        creationReason:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        descriptionEn:
          type: string
          nullable: true
    Structure:
      description: Representation d'une structure
      required:
        - id
        - status
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            currentName:
              description: 'currentName is computed using the most recent startDate. If startDate is never present, it returns the name with the most recent createdAt value.'
              $ref: '#/components/schemas/StructureNamePayload'
            alternativePaysageIds:
              description: Aggregates all structure ids redirected to the current structure
              type: array
              items:
                type: string
            creationOfficialDocument:
              description: Reference the official document that accounts for the structure creation
              $ref: '#/components/schemas/OfficialDocumentLight'
            closureOfficialDocument:
              description: Reference the official document that accounts for the structure closure
              $ref: '#/components/schemas/OfficialDocumentLight'
        - $ref: '#/components/schemas/StructurePayload'
        - $ref: '#/components/schemas/StructureStatusPayload'
        - $ref: '#/components/schemas/Metas'
    StructureStatusPayload:
      type: object
      description: Structure Internal Status
      properties:
        status:
          type: string
          enum:
            - deleted
            - draft
            - redirected
            - published
        redirection:
          type: string
          nullable: true
    StructureName:
      description: Representation d'une structure
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
        - $ref: '#/components/schemas/StructureNamePayload'
        - $ref: '#/components/schemas/Metas'
    StructureNamePayload:
      type: object
      description: Différentes dénominations d'une structure
      properties:
        officialName:
          type: string
          nullable: true
        usualName:
          type: string
          nullable: true
        shortName:
          type: string
          nullable: true
        brandName:
          type: string
          nullable: true
        nameEn:
          type: string
          nullable: true
        acronymFr:
          type: string
          nullable: true
        acronymEn:
          type: string
          nullable: true
        acronymLocal:
          type: string
          nullable: true
        otherNames:
          type: array
          nullable: true
          items:
            type: string
        startDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        comment:
          type: string
          nullable: true
        article:
          type: string
          nullable: true
          enum:
            - à l'
            - à
            - à la
            - dans le
            - dans les
            - aux
            - au
            - ''
            - null
    Weblink:
      description: Representation d'un weblink de structure
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
        - $ref: '#/components/schemas/WeblinkPayload'
        - $ref: '#/components/schemas/Metas'
    WeblinkPayload:
      type: object
      description: Différentes sites web concernant une structure
      properties:
        type:
          type: string
        url:
          type: string
        language:
          type: string
          nullable: true
    SocialMedia:
      description: Representation d'un media social
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              description: Unique resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
        - $ref: '#/components/schemas/SocialMediaPayload'
        - $ref: '#/components/schemas/Metas'
    SocialMediaPayload:
      type: object
      description: Différentes media sociaux d'une structure
      properties:
        type:
          type: string
        account:
          type: string
    IdentifierPayLoad:
      description: 'Identifiant WikiData, IdRef...'
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        active:
          type: boolean
        startDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    Identifier:
      description: Representation d'un identifiant de structure
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              description: Unique resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
        - $ref: '#/components/schemas/IdentifierPayLoad'
        - $ref: '#/components/schemas/Metas'
    StructureLocalisationPayload:
      type: object
      properties:
        cityId:
          type: string
          nullable: true
          description: Code d'identification de la commune (code insee pour la france)
          example: 67482
        distributionStatement:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        postOfficeBoxNumber:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        locality:
          type: string
          nullable: true
          example: La Défense
        place:
          type: string
          nullable: true
          description: Lieu-dit
        country:
          type: string
        telephone:
          type: string
          nullable: true
        coordinates:
          type: object
          nullable: true
          properties:
            lat:
              type: number
            lng:
              type: number
        startDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    StructureLocalisation:
      description: Representation d'une localisation de structure
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            gps:
              type: string
              nullable: true
              description: 'Coordonnées GPS en string, au format "lat,lng"'
        - $ref: '#/components/schemas/StructureLocalisationPayload'
        - $ref: '#/components/schemas/Metas'
    CategoryLight:
      type: object
      properties:
        id:
          type: string
        usualNameFr:
          type: string
        usualNameEn:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
          description: Description en français
        descriptionEn:
          type: string
          nullable: true
          description: Description en anglais
    CategoryPayload:
      type: object
      properties:
        usualNameFr:
          type: string
        usualNameEn:
          type: string
          nullable: true
        shortNameEn:
          type: string
          nullable: true
          description: Nom court en anglais
        shortNameFr:
          type: string
          nullable: true
          description: Nom court en français
        acronymFr:
          type: string
          nullable: true
          description: Sigle en français
        pluralNameFr:
          type: string
          nullable: true
          description: Forme du nom usuel français au pluriel
        otherNamesFr:
          type: array
          nullable: true
          description: Autres intitulés français
          items:
            type: string
        otherNamesEn:
          type: array
          nullable: true
          description: Autres intitulés anglais
          items:
            type: string
        descriptionFr:
          type: string
          nullable: true
          description: Description en français
        descriptionEn:
          type: string
          nullable: true
          description: Description en français
        inseeCode:
          type: string
          nullable: true
        sector:
          type: string
          nullable: true
        inPublicResearch:
          type: boolean
          nullable: true
        comment:
          type: string
          nullable: true
        isLegalCategory:
          type: boolean
          nullable: true
        officialDocumentId:
          type: string
          nullable: true
          writeOnly: true
        parentIds:
          type: array
          nullable: true
          writeOnly: true
          description: Liste d'identifiant de catégories parente
          items:
            type: string
    Category:
      type: object
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
            parents:
              type: array
              items:
                $ref: '#/components/schemas/CategoryLight'
            childs:
              type: array
              items:
                $ref: '#/components/schemas/CategoryLight'
            officialDocument:
              $ref: '#/components/schemas/OfficialDocumentLight'
        - $ref: '#/components/schemas/CategoryPayload'
        - $ref: '#/components/schemas/Metas'
    OfficialDocument:
      description: Object décrivant un document officiel
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
        - $ref: '#/components/schemas/OfficialDocumentPayload'
        - $ref: '#/components/schemas/Metas'
    OfficialDocumentPayload:
      description: Document officiel JO ou BO
      type: object
      properties:
        nature:
          type: string
          enum:
            - Publication au JO
            - Publication au BOESR
        type:
          type: string
          enum:
            - Loi
            - Décret
            - Ordonnance
            - Avis de vacance d'emploi
            - Arrêté
            - Circulaire
        documentNumber:
          type: string
        title:
          type: string
        pageUrl:
          type: string
          format: uri
        signatureDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        startDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        previsionalEndDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        textExtract:
          nullable: true
          type: string
        comment:
          nullable: true
          type: string
    OfficialDocumentLight:
      description: Document officiel JO ou BO
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        nature:
          type: string
          enum:
            - Publication au JO
            - Publication au BOESR
        type:
          type: string
          enum:
            - Loi
            - Décret
            - Ordonnance
            - Avis de vacance d'emploi
            - Arrêté
            - Circulaire
        documentNumber:
          type: string
        title:
          type: string
        pageUrl:
          type: string
          format: uri
    LegalCategory:
      required:
        - id
      allOf:
        - type: object
          properties:
            officialDocument:
              $ref: '#/components/schemas/OfficialDocumentLight'
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
        - $ref: '#/components/schemas/LegalCategoryPayload'
        - $ref: '#/components/schemas/Metas'
    LegalCategoryPayload:
      description: Catégory juridique
      type: object
      properties:
        inseeCode:
          type: string
          nullable: true
        longNameFr:
          type: string
        shortNameFr:
          type: string
          nullable: true
        acronymeFr:
          type: string
          nullable: true
        pluralNameFr:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        longNameEn:
          type: string
          nullable: true
        shortNameEn:
          type: string
          nullable: true
        otherNames:
          type: array
          items:
            type: string
        sector:
          type: string
          nullable: true
          enum:
            - public
            - privé
            - sans objet
            - null
        officialDocumentId:
          type: string
          nullable: true
          writeOnly: true
        legalPersonality:
          type: string
          nullable: true
          enum:
            - personne morale de droit public
            - personne morale de droit privé
            - organisation internationale
            - autre forme juridique étrangère
            - sans personalité juridique
            - null
        inPublicResearch:
          type: boolean
          nullable: true
        wikidataId:
          type: string
          nullable: true
        websiteFr:
          type: string
          nullable: true
        websiteEn:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
    Term:
      description: Object décrivant un terme
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
        - $ref: '#/components/schemas/TermPayload'
        - $ref: '#/components/schemas/Metas'
    TermPayload:
      description: Object décrivant l'ajout d'un terme
      type: object
      properties:
        usualNameFr:
          type: string
          description: Nom usuel en francais
          nullable: true
        usualNameEn:
          type: string
          description: Nom usuel en anglais
          nullable: true
        pluralNameFr:
          type: string
          description: Forme du nom usuel français au pluriel
          nullable: true
        pluralNameEn:
          type: string
          description: Forme du nom usuel anglais au pluriel
          nullable: true
        shortNameFr:
          type: string
          description: Nom court en français
          nullable: true
        shortNameEn:
          type: string
          description: Nom court en anglais
          nullable: true
        acronymFr:
          type: string
          description: Sigle en français
          nullable: true
        acronymEn:
          type: string
          description: Sigle en anglais
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        descriptionEn:
          type: string
          nullable: true
        otherName:
          type: array
          description: Autres intitulés
          nullable: true
          items:
            type: string
        parentIds:
          type: array
          description: Liste de reference à des termes parents
          nullable: true
          writeOnly: true
          items:
            type: string
            pattern: '^[a-zA-Z0-9]{5}$'
    Events:
      type: object
      properties:
        user:
          type: object
          readOnly: true
          properties:
            id:
              type: string
            username:
              type: string
            avatar:
              type: string
              format: uri
              nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        resourceUri:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        resourceId:
          type: string
          nullable: true
        resourceType:
          type: string
          nullable: true
        subResourceId:
          type: string
          nullable: true
        subResourceType:
          type: string
          nullable: true
        prevState:
          type: object
          nullable: true
        nextState:
          type: object
          nullable: true
    Person:
      description: Object décrivant une personne
      additionalProperties: true
      required:
        - id
        - lastName
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
        - $ref: '#/components/schemas/PersonPayload'
        - $ref: '#/components/schemas/Metas'
    PersonPayload:
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
        otherName:
          type: array
          items:
            type: string
        gender:
          type: string
          nullable: true
          enum:
            - Homme
            - Femme
            - Autre
            - null
        birthDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        deathDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        activity:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
    Price:
      description: Object décrivant un prix scientifique
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
            nameFr:
              type: string
              nullable: true
            nameEn:
              type: string
              nullable: true
            descriptionFr:
              type: string
              nullable: true
            descriptionEn:
              type: string
              nullable: true
            parents:
              type: array
              description: Identifiants des prix parents
              items:
                $ref: '#/components/schemas/PriceLight'
            startDate:
              type: string
              nullable: true
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        - $ref: '#/components/schemas/Metas'
    PricePayload:
      description: Object décrivant un prix scientifique
      additionalProperties: false
      type: object
      properties:
        nameFr:
          type: string
          nullable: true
        nameEn:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        descriptionEn:
          type: string
          nullable: true
        parentIds:
          type: array
          description: Identifiants des prix parents
          items:
            type: string
            pattern: '^[a-zA-Z0-9]{5}$'
        startDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    PriceLight:
      description: Object décrivant un prix scientifique
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        nameFr:
          type: string
        nameEn:
          type: string
    Document:
      description: Document
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
            url:
              type: string
              format: uri
            mimetype:
              type: string
            originalName:
              type: string
            path:
              type: string
        - $ref: '#/components/schemas/DocumentPayload'
        - $ref: '#/components/schemas/Metas'
    DocumentPayload:
      description: Document
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        file:
          writeOnly: true
          type: string
          format: binary
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Authentication with a Bearer token.
