openapi: 3.0.1
info:
  title: API
  description: Documentation for the Paysage rest API routes.
  contact:
    email: frederic.olland@enseignementsup.gouv.fr
  license:
    name: MIT
    url: 'https://github.com/dataesr/paysage-api/LICENCE.md'
  version: 1.0.0
servers:
  - url: 'https://api.paysage.staging.dataesr.ovh/'
    description: Staging server
  - url: 'https://api.paysage.dataesr.ovh/'
    description: Production server
  - url: 'http://localhost:3000/'
    description: Development server
tags:
  - name: Structures
  - name: Structures - Noms
  - name: Structures - Identifiants
  - name: Structures - Localisations
  - name: Structures - Liens web
  - name: Structures - Médias sociaux
  - name: Structures - Logos
  - name: Structures - Catégories
  - name: Personnes
  - name: Personnes - Identifiants
  - name: Personnes - Médias sociaux
  - name: Personnes - Liens web
  - name: Catégories
  - name: Catégories - Identifiants
  - name: Catégories - Liens web
  - name: Termes
  - name: Documents officiels
  - name: Documents
  - name: Catégories juridiques
  - name: Prix scientifiques
security:
  - BearerAuth: []
paths:
  /structures:
    get:
      tags:
        - Structures
      summary: Lister les structures
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Structure'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures
      summary: Créer une nouvelle structure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureCreatePayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}':
    get:
      tags:
        - Structures
      summary: Obtenir le détail d'une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '301':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures
      summary: Modifier une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureUpdatePayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Structures
      summary: Ajouter une structure avec son identifiant
      description: Permet de créer une structure avec un identifiant. L'identifiant doit respecter le format des identifiants Paysage.
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureCreatePayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Structure'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers':
    get:
      tags:
        - Structures - Identifiants
      summary: Lister les identifiants d'une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StructureIdentifier'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Identifiants
      summary: Ajouter un identifiant à la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureIdentifierCreatePayload
              required:
                - type
                - value
              allOf:
                - $ref: '#/components/schemas/StructureIdentifierPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureIdentifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/identifiers/{identifierId}':
    get:
      tags:
        - Structures - Identifiants
      summary: Obtenir le détail d'un identifiant de structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Identifiants
      summary: Retirer un identifiant de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Identifiants
      summary: Modifier un identifiant de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/identifierId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureIdentifierPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureIdentifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/localisations':
    get:
      tags:
        - Structures - Localisations
      summary: Lister les localisations d'une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StructureLocalisation'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Localisations
      summary: Ajouter une localisation à la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureLocalisationCreatePayload
              required:
                - country
              allOf:
                - $ref: '#/components/schemas/StructureLocalisationPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureLocalisation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/localisations/{localisationId}':
    get:
      tags:
        - Structures - Localisations
      summary: Obtenir le détail d'une localisation de structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/localisationId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureLocalisation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Localisations
      summary: Retirer une localisation de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/localisationId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Localisations
      summary: Modifier une localisation de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/localisationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureLocalisationPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureLocalisation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/logos':
    get:
      tags:
        - Structures - Logos
      summary: Lister les logos de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Logo'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Logos
      summary: Ajouter un logo à la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              title: LogoPayload
              type: object
              required:
                - file
              allOf:
                - $ref: '#/components/schemas/LogoPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/logos/{logoId}':
    get:
      tags:
        - Structures - Logos
      summary: Obtenir le détail d'un logo de structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/logoId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Logos
      summary: Retirer un logo de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/logoId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Logos
      summary: Modifier un logo de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/logoId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoPayload'
      responses:
        '200':
          description: OK
          content:
            multipart/form-data:
              schema:
                $ref: '#/components/schemas/Logo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names':
    get:
      tags:
        - Structures - Noms
      summary: Lister les noms d'une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StructureName'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Noms
      summary: Ajouter un nom à la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureNamePayload
              type: object
              required:
                - usualName
              allOf:
                - $ref: '#/components/schemas/StructureNamePayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureName'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/names/{nameId}':
    get:
      tags:
        - Structures - Noms
      summary: Obtenir le détail d'un nom de structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/nameId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureName'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Noms
      summary: Retirer un nom de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/nameId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Noms
      summary: Modifier un nom de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/nameId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureNamePayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureName'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/weblinks':
    get:
      tags:
        - Structures - Liens web
      summary: Lister les liens web de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Weblink'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Liens web
      summary: Ajouter un lien web à la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureWeblinkPayLoad
              type: object
              required:
                - type
                - url
              allOf:
                - $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/weblinks/{weblinkId}':
    get:
      tags:
        - Structures - Liens web
      summary: Obtenir le détail d'un lien web de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Liens web
      summary: Retirer un lien web de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Liens web
      summary: Modifier un lien web de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/weblinkId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/socialmedias':
    get:
      tags:
        - Structures - Médias sociaux
      summary: Lister les médias sociaux d'une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SocialMedia'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Médias sociaux
      summary: Ajouter un média social à la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              title: StructureSocialMediaPayLoad
              type: object
              required:
                - type
                - account
              allOf:
                - $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/socialmedias/{socialmediaId}':
    get:
      tags:
        - Structures - Médias sociaux
      summary: Obtenir le détail d'un media social d'une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Médias sociaux
      summary: Retirer un média social de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Médias sociaux
      summary: Modifier un média social de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/socialmediaId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/categories':
    get:
      tags:
        - Structures - Catégories
      summary: Lister les catégories d'une structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StructureCategory'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Structures - Catégories
      summary: Ajouter une catégory à la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureCategoryPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/structures/{structureId}/categories/{relatedCategoryId}':
    get:
      tags:
        - Structures - Catégories
      summary: Obtenir le détail d'une catégory de structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/relatedCategoryId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureCategory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Structures - Catégories
      summary: Retirer une catégory de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/relatedCategoryId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Structures - Catégories
      summary: Modifier une catégory de la structure
      parameters:
        - $ref: '#/components/parameters/structureId'
        - $ref: '#/components/parameters/relatedCategoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructureCategoryPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructureCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /persons:
    get:
      tags:
        - Personnes
      summary: Lister les personnes
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Personnes
      summary: Créer une personne
      requestBody:
        content:
          application/json:
            schema:
              title: CreatePerson
              type: object
              required:
                - lastName
              allOf:
                - $ref: '#/components/schemas/PersonPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}':
    get:
      tags:
        - Personnes
      summary: Obtenir le détail d'une personne
      parameters:
        - $ref: '#/components/parameters/personId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Personnes
      summary: Supprimer une personne
      parameters:
        - $ref: '#/components/parameters/personId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Personnes
      summary: Modifier une personne
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Personnes
      summary: Créer une personne avec un identifiant.
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/identifiers':
    get:
      tags:
        - Personnes - Identifiants
      summary: Lister les identifiants d'une personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PersonIdentifier'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Personnes - Identifiants
      summary: Ajouter un identifiant à la personne
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              title: PersonIdentifierPayLoad
              type: object
              required:
                - type
                - value
                - active
              allOf:
                - $ref: '#/components/schemas/PersonIdentifierPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonIdentifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/identifiers/{identifierId}':
    get:
      tags:
        - Personnes - Identifiants
      summary: Obtenir le détail d'un identifiant de personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Personnes - Identifiants
      summary: Retirer un identifiant de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Personnes - Identifiants
      summary: Modifier un identifiant de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/identifierId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonIdentifierPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonIdentifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/weblinks':
    get:
      tags:
        - Personnes - Liens web
      summary: Lister les liens web de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Weblink'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Personnes - Liens web
      summary: Ajouter un lien web à la personne
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              title: categoryWeblinkPayLoad
              type: object
              required:
                - type
                - url
              allOf:
                - $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/weblinks/{weblinkId}':
    get:
      tags:
        - Personnes - Liens web
      summary: Obtenir le détail d'un lien web de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Personnes - Liens web
      summary: Retirer un lien web de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Personnes - Liens web
      summary: Modifier un lien web de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/weblinkId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/socialmedias':
    get:
      tags:
        - Personnes - Médias sociaux
      summary: Lister les médias sociaux d'une personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SocialMedia'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Personnes - Médias sociaux
      summary: Ajouter un média social à la personne
      parameters:
        - $ref: '#/components/parameters/personId'
      requestBody:
        content:
          application/json:
            schema:
              title: PersonSocialMediaPayLoad
              type: object
              required:
                - type
                - account
              allOf:
                - $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/persons/{personId}/socialmedias/{socialmediaId}':
    get:
      tags:
        - Personnes - Médias sociaux
      summary: Obtenir le détail d'un media social d'une personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Personnes - Médias sociaux
      summary: Retirer un média social de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/socialmediaId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Personnes - Médias sociaux
      summary: Modifier un média social de la personne
      parameters:
        - $ref: '#/components/parameters/personId'
        - $ref: '#/components/parameters/socialmediaId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialMediaPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /terms:
    get:
      tags:
        - Termes
      summary: Lister les termes
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Term'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Termes
      summary: Créer un terme
      requestBody:
        content:
          application/json:
            schema:
              title: CreateTerm
              type: object
              required:
                - usualNameFr
              allOf:
                - $ref: '#/components/schemas/TermPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/terms/{termId}':
    get:
      tags:
        - Termes
      summary: Obtenir le détail d'un terme
      parameters:
        - $ref: '#/components/parameters/termId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Termes
      summary: Supprimer un terme
      parameters:
        - $ref: '#/components/parameters/termId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Termes
      summary: Modifier un terme
      parameters:
        - $ref: '#/components/parameters/termId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TermPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Termes
      summary: Créer un terme avec un identifiant.
      parameters:
        - $ref: '#/components/parameters/termId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Term'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Term'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /legalcategories:
    get:
      tags:
        - Catégories juridiques
      summary: Lister les catégorie juridique
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LegalCategory'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Catégories juridiques
      summary: Créer un catégorie juridique
      requestBody:
        content:
          application/json:
            schema:
              title: CreateLegalCategory
              type: object
              required:
                - longNameFr
              allOf:
                - $ref: '#/components/schemas/LegalCategoryPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/legalcategories/{legalCategoryId}':
    get:
      tags:
        - Catégories juridiques
      summary: Obtenir le détail d'une catégorie juridique
      parameters:
        - $ref: '#/components/parameters/legalCategoryId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalCategory'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Catégories juridiques
      summary: Supprimer une catégorie juridique
      parameters:
        - $ref: '#/components/parameters/legalCategoryId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Catégories juridiques
      summary: Modifier une catégorie juridique
      parameters:
        - $ref: '#/components/parameters/legalCategoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalCategoryPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Catégories juridiques
      summary: Créer une catégorie juridique avec un identifiant.
      parameters:
        - $ref: '#/components/parameters/legalCategoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalCategory'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalCategory'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /categories:
    get:
      tags:
        - Catégories
      summary: Lister les catégories
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Catégories
      summary: Créer un catégorie
      requestBody:
        content:
          application/json:
            schema:
              title: CreateCategory
              type: object
              required:
                - usualNameFr
              allOf:
                - $ref: '#/components/schemas/CategoryPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}':
    get:
      tags:
        - Catégories
      summary: Obtenir le détail d'une catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Catégories
      summary: Supprimer une catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Catégories
      summary: Modifier une catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Catégories
      summary: Créer un catégorie avec un identifiant.
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/identifiers':
    get:
      tags:
        - Catégories - Identifiants
      summary: Lister les identifiants d'une categorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategoryIdentifier'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Catégories - Identifiants
      summary: Ajouter un identifiant à la categorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              title: categoryIdentifierPayLoad
              type: object
              required:
                - type
                - value
                - active
              allOf:
                - $ref: '#/components/schemas/CategoryIdentifierPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryIdentifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/identifiers/{identifierId}':
    get:
      tags:
        - Catégories - Identifiants
      summary: Obtenir le détail d'un identifiant de catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryIdentifier'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Catégories - Identifiants
      summary: Retirer un identifiant de la catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/identifierId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Catégories - Identifiants
      summary: Modifier un identifiant de la catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/identifierId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryIdentifierPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryIdentifier'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/weblinks':
    get:
      tags:
        - Catégories - Liens web
      summary: Lister les liens web de la catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Weblink'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Catégories - Liens web
      summary: Ajouter un lien web à la catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        content:
          application/json:
            schema:
              title: categoryWeblinkPayLoad
              type: object
              required:
                - type
                - url
              allOf:
                - $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  '/categories/{categoryId}/weblinks/{weblinkId}':
    get:
      tags:
        - Catégories - Liens web
      summary: Obtenir le détail d'un lien web de la catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Catégories - Liens web
      summary: Retirer un lien web de la catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/weblinkId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Catégories - Liens web
      summary: Modifier un lien web de la catégorie
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/weblinkId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeblinkPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weblink'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /officialdocuments:
    get:
      tags:
        - Documents officiels
      summary: Lister les documents officiels
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OfficialDocument'
                  totalCount:
                    type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Documents officiels
      summary: Ajouter un document officiel
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - nature
                - type
                - title
                - documentNumber
                - pageUrl
              $ref: '#/components/schemas/OfficialDocumentPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficialDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/officialdocuments/{officialDocumentId}':
    get:
      tags:
        - Documents officiels
      summary: Obtenir le détail d'un document officiel
      parameters:
        - $ref: '#/components/parameters/officialDocumentId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficialDocument'
        '301':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Documents officiels
      summary: Supprimer un document officiel
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/officialDocumentId'
      responses:
        '204':
          description: No content
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Documents officiels
      summary: Modifier un document officiel
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/officialDocumentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfficialDocumentPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfficialDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /documents:
    get:
      tags:
        - Documents
      summary: Lister les documents
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Document'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Documents
      summary: Créer un nouveau document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPayload'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/documents/{documentId}':
    get:
      tags:
        - Documents
      summary: Obtenir le détail d'un document
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '301':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Documents
      summary: Modifier un document
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /prices:
    get:
      tags:
        - Prix scientifiques
      summary: Lister les prix scientifiques
      parameters:
        - $ref: '#/components/parameters/filters'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Price'
                  totalCount:
                    type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Prix scientifiques
      summary: Créer un nouveau prix scientifique
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PricePayload'
                - required:
                    - nameFr
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  '/prices/{priceId}':
    get:
      tags:
        - Prix scientifiques
      summary: Obtenir le détail d'un prix scientifique
      parameters:
        - $ref: '#/components/parameters/priceId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '301':
          description: No content
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - Prix scientifiques
      summary: Modifier un prix scientifique
      parameters:
        - $ref: '#/components/parameters/priceId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PricePayload'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  parameters:
    filters:
      name: filters
      in: query
      description: A filtering object
      style: deepObject
      schema:
        type: object
        description: '?filters[lastName][$eq]=Dupond&filters[lastName][$neq]=Dupont'
    skip:
      name: skip
      in: query
      description: number of items to skip
      schema:
        type: integer
        format: int32
        default: 0
    limit:
      name: limit
      in: query
      description: max records to return
      schema:
        type: integer
        format: int32
        default: 20
    sort:
      name: sort
      in: query
      description: Sort returned data
      schema:
        type: string
        description: '?sort=firstname,-createdAt'
    documentId:
      name: documentId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique resource identifier
    structureId:
      name: structureId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique structure id
    nameId:
      name: nameId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique name id
    logoId:
      name: logoId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique logo id
    identifierId:
      name: identifierId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique identifier id
    localisationId:
      name: localisationId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique localisation id
    weblinkId:
      name: weblinkId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique weblink id
    socialmediaId:
      name: socialmediaId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique social media id
    termId:
      name: termId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique term id
    categoryId:
      name: categoryId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique category id
    relatedCategoryId:
      name: relatedCategoryId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{8}$'
      required: true
      description: Unique relation id
    legalCategoryId:
      name: legalCategoryId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique legal category id
    priceId:
      name: priceId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique price id
    personId:
      name: personId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique person id
    officialDocumentId:
      name: officialDocumentId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique official document id
    newsId:
      name: newsId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique news id
    roleId:
      name: roleId
      in: path
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{5}$'
      required: true
      description: Unique role id
  responses:
    BadRequest:
      description: Illegal input for operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Permission denied.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentification needed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: An unexpected error occured on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Structure:
      title: Structure
      description: Representation d'une structure
      readOnly: true
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            currentName:
              description: 'currentName is computed using the most recent startDate. If startDate is never present, it returns the name with the most recent createdAt value.'
              $ref: '#/components/schemas/StructureNameLight'
            currentLocalisation:
              description: 'currentLocalisation is computed using the most recent startDate. If startDate is never present, it returns the name with the most recent createdAt value.'
              $ref: '#/components/schemas/StructureLocalisationLight'
            alternativePaysageIds:
              description: Aggregates all structure ids redirected to the current structure
              type: array
              items:
                type: string
            creationOfficialDocument:
              description: Reference the official document that accounts for the structure creation
              $ref: '#/components/schemas/OfficialDocumentLight'
            closureOfficialDocument:
              description: Reference the official document that accounts for the structure closure
              $ref: '#/components/schemas/OfficialDocumentLight'
            structureStatus:
              type: string
              nullable: true
              enum:
                - active
                - inactive
                - forthcoming
                - null
            creationDate:
              type: string
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
              nullable: true
            closureDate:
              type: string
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
              nullable: true
            creationReason:
              type: string
              nullable: true
            descriptionFr:
              type: string
              nullable: true
            descriptionEn:
              type: string
              nullable: true
        - $ref: '#/components/schemas/Metas'
    StructureLight:
      title: StructureLight
      description: Representation simplifiée d'une structure
      readOnly: true
      required:
        - id
        - status
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          pattern: '^[a-zA-Z0-9]{5}$'
        name:
          description: 'currentName is computed using the most recent startDate. If startDate is never present, it returns the name with the most recent createdAt value.'
          type: string
          nullable: true
        address:
          description: 'address is computed using the most recent localisation. If startDate is never present, it returns the name with the most recent createdAt value.'
          type: string
          nullable: true
        structureStatus:
          type: string
          nullable: true
          enum:
            - active
            - inactive
            - forthcoming
            - null
        creationDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        closureDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
    StructureName:
      title: StructureName
      description: Representation d'un nom de structure
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            officialName:
              type: string
              nullable: true
            usualName:
              type: string
              nullable: true
            shortName:
              type: string
              nullable: true
            brandName:
              type: string
              nullable: true
            nameEn:
              type: string
              nullable: true
            acronymFr:
              type: string
              nullable: true
            acronymEn:
              type: string
              nullable: true
            acronymLocal:
              type: string
              nullable: true
            otherNames:
              type: array
              nullable: true
              items:
                type: string
            startDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            comment:
              type: string
              nullable: true
            article:
              type: string
              nullable: true
              enum:
                - à l'
                - à
                - à la
                - dans le
                - dans les
                - aux
                - au
                - ''
                - null
        - $ref: '#/components/schemas/Metas'
    StructureNameLight:
      title: StructureNameLight
      description: Representation simplifiée d'un nom de structure
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          pattern: '^[a-zA-Z0-9]{8}$'
        rid:
          type: string
          description: Unique identifier
          pattern: '^[a-zA-Z0-9]{5}$'
        usualName:
          type: string
          nullable: true
        nameEn:
          type: string
          nullable: true
        acronymFr:
          type: string
          nullable: true
        acronymEn:
          type: string
          nullable: true
        article:
          type: string
          nullable: true
          enum:
            - à l'
            - à
            - à la
            - dans le
            - dans les
            - aux
            - au
            - ''
            - null
    StructureCategory:
      title: StructureCategory
      description: Représentation d'une relation entre structure et catégorie
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            category:
              $ref: '#/components/schemas/CategoryLight'
            startDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        - $ref: '#/components/schemas/Metas'
    StructureIdentifier:
      title: StructureIdentifier
      description: Representation d'un identifiant de structure
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            type:
              $ref: '#/components/schemas/StructureIdentifierTypesEnum'
            value:
              type: string
            active:
              type: boolean
            startDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        - $ref: '#/components/schemas/Metas'
    StructureLocalisation:
      title: StructureLocalisation
      description: Représentation d'une localisation de structure
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            cityId:
              type: string
              nullable: true
              description: Code d'identification de la commune (code insee pour la france)
              example: 67482
            distributionStatement:
              type: string
              nullable: true
            address:
              type: string
              nullable: true
            postOfficeBoxNumber:
              type: string
              nullable: true
            postalCode:
              type: string
              nullable: true
            locality:
              type: string
              nullable: true
              example: La Défense
            place:
              type: string
              nullable: true
              description: Lieu-dit
            country:
              type: string
            telephone:
              type: string
              nullable: true
            coordinates:
              type: object
              nullable: true
              properties:
                lat:
                  type: number
                lng:
                  type: number
            startDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        - $ref: '#/components/schemas/Metas'
    StructureLocalisationLight:
      title: StructureLocalisationLight
      description: Représentation simplifiée d'une localisation de structure
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Unique identifier
          pattern: '^[a-zA-Z0-9]{8}$'
        rid:
          type: string
          readOnly: true
          description: Unique identifier
          pattern: '^[a-zA-Z0-9]{5}$'
        address:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        locality:
          type: string
          nullable: true
          example: La Défense
        country:
          type: string
        coordinates:
          type: object
          nullable: true
          properties:
            lat:
              type: number
            lng:
              type: number
    Weblink:
      title: Weblink
      description: Représentation d'un lien web
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique parent resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            type:
              type: string
            url:
              type: string
            language:
              type: string
              nullable: true
        - $ref: '#/components/schemas/Metas'
    Logo:
      title: Logo
      description: Représentation d'un logo
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
              readOnly: true
            rid:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
            url:
              type: string
              nullable: true
              readOnly: true
            path:
              type: string
              nullable: true
              readOnly: true
            mimetype:
              type: string
              nullable: true
              readOnly: true
            originalName:
              type: string
              nullable: true
              readOnly: true
            legend:
              type: string
              nullable: true
            credits:
              type: string
              nullable: true
            license:
              type: string
              enum:
                - CC BY
                - CC BY-SA
                - CC BY-ND
                - CC BY-NC
                - CC BY-NC-SA
                - CC BY-NC-ND
                - null
              nullable: true
            startDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            comment:
              type: string
              nullable: true
            file:
              writeOnly: true
              type: string
              format: binary
        - $ref: '#/components/schemas/Metas'
    SocialMedia:
      title: SocialMedia
      description: Representation d'un média social
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique parent resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            type:
              type: string
            account:
              type: string
        - $ref: '#/components/schemas/Metas'
    OfficialDocument:
      title: OfficialDocument
      description: Représentation d'un document officiel
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
            nature:
              $ref: '#/components/schemas/OfficialDocumentNaturesEnum'
            type:
              $ref: '#/components/schemas/OfficialDocumentTypesEnum'
            documentNumber:
              type: string
            title:
              type: string
            pageUrl:
              type: string
              format: uri
            signatureDate:
              nullable: true
              type: string
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            startDate:
              nullable: true
              type: string
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            previsionalEndDate:
              nullable: true
              type: string
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              nullable: true
              type: string
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            textExtract:
              nullable: true
              type: string
            comment:
              nullable: true
              type: string
        - $ref: '#/components/schemas/Metas'
    OfficialDocumentLight:
      title: OfficialDocumentLight
      description: Représentation simplifiée d'un document officiel
      type: object
      required:
        - id
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        nature:
          $ref: '#/components/schemas/OfficialDocumentNaturesEnum'
        type:
          $ref: '#/components/schemas/OfficialDocumentTypesEnum'
        documentNumber:
          type: string
        title:
          type: string
        pageUrl:
          type: string
          format: uri
    Document:
      title: Document
      description: Représentation d'un document
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
            url:
              type: string
              format: uri
              readOnly: true
            mimetype:
              type: string
              readOnly: true
            originalName:
              type: string
              readOnly: true
            path:
              type: string
              readOnly: true
            title:
              type: string
            description:
              type: string
              nullable: true
            file:
              writeOnly: true
              type: string
              format: binary
        - $ref: '#/components/schemas/Metas'
    DocumentLight:
      title: DocumentLight
      description: Représentation simplifié d'un document
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        url:
          type: string
          format: uri
          readOnly: true
        mimetype:
          type: string
          readOnly: true
        title:
          type: string
        description:
          type: string
          nullable: true
    Category:
      type: object
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
            parents:
              type: array
              items:
                $ref: '#/components/schemas/CategoryLight'
            childs:
              type: array
              items:
                $ref: '#/components/schemas/CategoryLight'
            officialDocument:
              $ref: '#/components/schemas/OfficialDocument'
            usualNameFr:
              type: string
            usualNameEn:
              type: string
              nullable: true
            shortNameEn:
              type: string
              nullable: true
              description: Nom court en anglais
            shortNameFr:
              type: string
              nullable: true
              description: Nom court en français
            acronymFr:
              type: string
              nullable: true
              description: Sigle en français
            pluralNameFr:
              type: string
              nullable: true
              description: Forme du nom usuel français au pluriel
            otherNamesFr:
              type: array
              nullable: true
              description: Autres intitulés français
              items:
                type: string
            otherNamesEn:
              type: array
              nullable: true
              description: Autres intitulés anglais
              items:
                type: string
            descriptionFr:
              type: string
              nullable: true
              description: Description en français
            descriptionEn:
              type: string
              nullable: true
              description: Description en français
            inseeCode:
              type: string
              nullable: true
            sector:
              type: string
              nullable: true
            inPublicResearch:
              type: boolean
              nullable: true
            comment:
              type: string
              nullable: true
            isLegalCategory:
              type: boolean
              nullable: true
            officialDocumentId:
              type: string
              nullable: true
              writeOnly: true
            parentIds:
              type: array
              nullable: true
              writeOnly: true
              description: Liste d'identifiant de catégories parente
              items:
                type: string
        - $ref: '#/components/schemas/Metas'
    CategoryLight:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
        usualNameFr:
          type: string
        usualNameEn:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
          description: Description en français
        descriptionEn:
          type: string
          nullable: true
          description: Description en français
    CategoryIdentifier:
      title: CategoryIdentifier
      description: Representation d'un identifiant de catégorie
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            type:
              $ref: '#/components/schemas/CategoryIdentifierTypesEnum'
            value:
              type: string
            active:
              type: boolean
            startDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        - $ref: '#/components/schemas/Metas'
    Price:
      description: Représentation détaillée d'un prix scientifique
      readOnly: true
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
            nameFr:
              type: string
              nullable: true
            nameEn:
              type: string
              nullable: true
            descriptionFr:
              type: string
              nullable: true
            descriptionEn:
              type: string
              nullable: true
            parents:
              type: array
              readOnly: true
              description: Représentation simplifiée des parents du prix scientifique
              items:
                $ref: '#/components/schemas/PriceLight'
            startDate:
              type: string
              nullable: true
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        - $ref: '#/components/schemas/Metas'
    PriceLight:
      description: Représentation simplifiée d'un prix scientifique
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        nameFr:
          type: string
        nameEn:
          type: string
    Person:
      title: Person
      description: Object décrivant une personne
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{5}$'
              readOnly: true
            firstName:
              type: string
              nullable: true
            lastName:
              type: string
            otherNames:
              type: array
              items:
                type: string
            gender:
              type: string
              nullable: true
              enum:
                - Homme
                - Femme
                - Autre
                - null
            birthDate:
              type: string
              nullable: true
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            deathDate:
              type: string
              nullable: true
              pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            activity:
              type: string
              nullable: true
            comment:
              type: string
              nullable: true
        - $ref: '#/components/schemas/Metas'
    PersonLight:
      title: PersonLight
      description: Object décrivant une personne
      properties:
        id:
          type: string
          description: Unique identifier
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
        gender:
          type: string
          nullable: true
          enum:
            - Homme
            - Femme
            - Autre
            - null
        birthDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        deathDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        activity:
          type: string
          nullable: true
    PersonIdentifier:
      title: PersonIdentifier
      description: Representation d'un identifiant de catégorie
      allOf:
        - type: object
          properties:
            id:
              type: string
              readOnly: true
              description: Unique identifier
              pattern: '^[a-zA-Z0-9]{8}$'
            rid:
              type: string
              readOnly: true
              description: Unique resource identifier
              pattern: '^[a-zA-Z0-9]{5}$'
            type:
              $ref: '#/components/schemas/PersonIdentifierTypesEnum'
            value:
              type: string
            active:
              type: boolean
            startDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
            endDate:
              type: string
              nullable: true
              pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        - $ref: '#/components/schemas/Metas'
    Role:
      title: Role
      description: Représentation d'un rôle.
      allOf:
        - type: object
          properties:
            generic:
              type: boolean
            longNameFr:
              type: string
            shortNameFr:
              type: string
            acronymFr:
              type: string
            pluralNameFr:
              type: string
            femNameFr:
              type: string
            otherNameFr:
              type: string
            descriptionFr:
              type: string
            longNameEn:
              type: string
            shortNameEn:
              type: string
            otherNameEn:
              type: string
            descriptionEn:
              type: string
            nameFr:
              type: string
            nameEn:
              type: string
        - $ref: '#/components/schemas/Metas'
    RoleLight:
      title: Role
      description: Représentation simplifiée d'un rôle.
      type: object
      properties:
        generic:
          type: boolean
        descriptionFr:
          type: string
        nameFr:
          type: string
        nameEn:
          type: string
        femNameFr:
          type: string
    Term:
      description: Représentation détaillée d'un terme
      readOnly: true
      allOf:
        - type: object
          properties:
            usualNameFr:
              type: string
              description: Nom usuel en francais
              nullable: true
            usualNameEn:
              type: string
              description: Nom usuel en anglais
              nullable: true
            pluralNameFr:
              type: string
              description: Forme du nom usuel français au pluriel
              nullable: true
            pluralNameEn:
              type: string
              description: Forme du nom usuel anglais au pluriel
              nullable: true
            shortNameFr:
              type: string
              description: Nom court en français
              nullable: true
            shortNameEn:
              type: string
              description: Nom court en anglais
              nullable: true
            acronymFr:
              type: string
              description: Sigle en français
              nullable: true
            acronymEn:
              type: string
              description: Sigle en anglais
              nullable: true
            descriptionFr:
              type: string
              nullable: true
            descriptionEn:
              type: string
              nullable: true
            otherName:
              type: array
              description: Autres intitulés
              nullable: true
              items:
                type: string
        - $ref: '#/components/schemas/Metas'
    TermLight:
      description: Représentation simplifiée d'un terme
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
          readOnly: true
        usualNameFr:
          type: string
        usualNameEn:
          type: string
    LegalCategory:
      type: object
      required:
        - id
      allOf:
        - type: object
          properties:
            id:
              type: string
              pattern: '^[a-zA-Z0-9]{5}$'
            inseeCode:
              type: string
              nullable: true
            longNameFr:
              type: string
            shortNameFr:
              type: string
              nullable: true
            acronymeFr:
              type: string
              nullable: true
            pluralNameFr:
              type: string
              nullable: true
            descriptionFr:
              type: string
              nullable: true
            longNameEn:
              type: string
              nullable: true
            shortNameEn:
              type: string
              nullable: true
            otherNames:
              type: array
              items:
                type: string
            sector:
              type: string
              nullable: true
              enum:
                - public
                - privé
                - sans objet
                - null
            officialDocument:
              $ref: '#/components/schemas/OfficialDocument'
            legalPersonality:
              type: string
              nullable: true
              enum:
                - personne morale de droit public
                - personne morale de droit privé
                - organisation internationale
                - autre forme juridique étrangère
                - sans personalité juridique
                - null
            inPublicResearch:
              type: boolean
              nullable: true
            wikidataId:
              type: string
              nullable: true
            websiteFr:
              type: string
              nullable: true
            websiteEn:
              type: string
              nullable: true
            comment:
              type: string
              nullable: true
        - $ref: '#/components/schemas/Metas'
    LegalCategoryLight:
      type: object
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9]{5}$'
        inseeCode:
          type: string
          nullable: true
        longNameFr:
          type: string
        descriptionFr:
          type: string
          nullable: true
        sector:
          type: string
          nullable: true
          enum:
            - public
            - privé
            - sans objet
            - null
        legalPersonality:
          type: string
          nullable: true
          enum:
            - personne morale de droit public
            - personne morale de droit privé
            - organisation internationale
            - autre forme juridique étrangère
            - sans personalité juridique
            - null
        inPublicResearch:
          type: boolean
          nullable: true
        comment:
          type: string
          nullable: true
    StructureCreatePayload:
      title: StructureBulkInsertPayload
      description: Liste
      additionalProperties: false
      required:
        - usualName
      type: object
      properties:
        officialName:
          type: string
          nullable: true
        usualName:
          type: string
          nullable: true
        shortName:
          type: string
          nullable: true
        brandName:
          type: string
          nullable: true
        nameEn:
          type: string
          nullable: true
        acronymFr:
          type: string
          nullable: true
        acronymEn:
          type: string
          nullable: true
        acronymLocal:
          type: string
          nullable: true
        otherNames:
          type: array
          nullable: true
          items:
            type: string
        article:
          type: string
          nullable: true
          enum:
            - à l'
            - à
            - à la
            - dans le
            - dans les
            - aux
            - au
            - ''
            - null
        structureStatus:
          type: string
          nullable: true
          enum:
            - active
            - inactive
            - forthcoming
            - null
        creationDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        closureDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        categories:
          type: array
          items:
            type: string
        legelCategory:
          type: string
        cityId:
          type: string
          nullable: true
          description: Code d'identification de la commune (code insee pour la france)
          example: 67482
        distributionStatement:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        postOfficeBoxNumber:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        locality:
          type: string
          nullable: true
          example: La Défense
        place:
          type: string
          nullable: true
          description: Lieu-dit
        country:
          type: string
        telephone:
          type: string
          nullable: true
        coordinates:
          type: object
          nullable: true
          properties:
            lat:
              type: number
            lng:
              type: number
        idref:
          type: string
          nullable: true
        wikidata:
          type: string
          nullable: true
        ror:
          type: string
          nullable: true
        uai:
          type: string
          nullable: true
        siret:
          type: string
          nullable: true
        rnsr:
          type: string
          nullable: true
        ed:
          type: string
          nullable: true
        websiteEn:
          type: string
          nullable: true
        websiteFr:
          type: string
          nullable: true
        twitter:
          type: string
          nullable: true
        linkedIn:
          type: string
          nullable: true
        parents:
          type: array
          items:
            type: string
    StructureUpdatePayload:
      title: Structure
      description: Representation d'une structure
      additionalProperties: false
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Unique identifier
          pattern: '^[a-zA-Z0-9]{5}$'
        structureStatus:
          type: string
          nullable: true
          enum:
            - active
            - inactive
            - forthcoming
            - null
        creationDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        creationOfficialDocumentId:
          type: string
          description: Unique officialDocument identifier
          pattern: '^[a-zA-Z0-9]{8}$'
          nullable: true
        closureDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        closureOfficialDocumentId:
          type: string
          description: Unique officialDocument identifier
          pattern: '^[a-zA-Z0-9]{8}$'
          nullable: true
        creationReason:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        descriptionEn:
          type: string
          nullable: true
    StructureCategoryPayload:
      title: StructureCategoryPayload
      description: Modèle servant à ajouter une categorie à un structure
      type: object
      properties:
        categoryId:
          type: string
          description: Unique category identifier
          pattern: '^[a-zA-Z0-9]{5}$'
        startDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
        endDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
          nullable: true
    StructureIdentifierPayload:
      title: StructureIdentifierPayload
      description: Modèle de creation et d'update d'un identifiant de structure
      type: object
      properties:
        type:
          $ref: '#/components/schemas/StructureIdentifierTypesEnum'
        value:
          type: string
        active:
          type: boolean
        startDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    StructureNamePayload:
      title: StructureNamePayload
      description: Modèle de création et d'update d'un nom de structure
      type: object
      properties:
        officialName:
          type: string
          nullable: true
        usualName:
          type: string
          nullable: true
        shortName:
          type: string
          nullable: true
        brandName:
          type: string
          nullable: true
        nameEn:
          type: string
          nullable: true
        acronymFr:
          type: string
          nullable: true
        acronymEn:
          type: string
          nullable: true
        acronymLocal:
          type: string
          nullable: true
        otherNames:
          type: array
          nullable: true
          items:
            type: string
        startDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        comment:
          type: string
          nullable: true
        article:
          type: string
          nullable: true
          enum:
            - à l'
            - à
            - à la
            - dans le
            - dans les
            - aux
            - au
            - ''
            - null
    StructureLocalisationPayload:
      title: StructureLocalisationPayload
      description: Modèle de création et d'update d'une localisation de structure
      type: object
      properties:
        cityId:
          type: string
          nullable: true
          description: Code d'identification de la commune (code insee pour la france)
          example: 67482
        distributionStatement:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        postOfficeBoxNumber:
          type: string
          nullable: true
        postalCode:
          type: string
          nullable: true
        locality:
          type: string
          nullable: true
          example: La Défense
        place:
          type: string
          nullable: true
          description: Lieu-dit
        country:
          type: string
        telephone:
          type: string
          nullable: true
        coordinates:
          type: object
          nullable: true
          properties:
            lat:
              type: number
            lng:
              type: number
        startDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    CategoryPayload:
      title: CategoryPayload
      description: Modèle de création et d'update d'une catégorie
      additionalProperties: false
      type: object
      properties:
        usualNameFr:
          type: string
        usualNameEn:
          type: string
          nullable: true
        shortNameEn:
          type: string
          nullable: true
          description: Nom court en anglais
        shortNameFr:
          type: string
          nullable: true
          description: Nom court en français
        acronymFr:
          type: string
          nullable: true
          description: Sigle en français
        pluralNameFr:
          type: string
          nullable: true
          description: Forme du nom usuel français au pluriel
        otherNamesFr:
          type: array
          nullable: true
          description: Autres intitulés français
          items:
            type: string
        otherNamesEn:
          type: array
          nullable: true
          description: Autres intitulés anglais
          items:
            type: string
        descriptionFr:
          type: string
          nullable: true
          description: Description en français
        descriptionEn:
          type: string
          nullable: true
          description: Description en français
        inseeCode:
          type: string
          nullable: true
        sector:
          type: string
          nullable: true
        inPublicResearch:
          type: boolean
          nullable: true
        comment:
          type: string
          nullable: true
        isLegalCategory:
          type: boolean
          nullable: true
        officialDocumentId:
          type: string
          nullable: true
          writeOnly: true
        parentIds:
          type: array
          nullable: true
          writeOnly: true
          description: Liste d'identifiant de catégories parente
          items:
            type: string
    CategoryIdentifierPayload:
      title: CategoryIdentifierPayload
      description: Modèle de création et d'update d'un identifiant de catégorie
      additionalProperties: false
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CategoryIdentifierTypesEnum'
        value:
          type: string
        active:
          type: boolean
        startDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    PersonPayload:
      title: PersonPayload
      description: Modèle d'écriture et de modification d'une personne
      additionalProperties: false
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
        otherNames:
          type: array
          items:
            type: string
        gender:
          type: string
          nullable: true
          enum:
            - Homme
            - Femme
            - Autre
            - null
        birthDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        deathDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        activity:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
    PersonIdentifierPayload:
      title: PersonIdentifierPayload
      description: Représentation simplifiée d'un identifiant de catégorie
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/PersonIdentifierTypesEnum'
        value:
          type: string
        active:
          type: boolean
        startDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    PricePayload:
      description: Schema de création et de modification d'une représentation d'un prix scientifique
      additionalProperties: false
      type: object
      properties:
        nameFr:
          type: string
          nullable: true
        nameEn:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        descriptionEn:
          type: string
          nullable: true
        parentIds:
          type: array
          writeOnly: true
          description: Identifiants des prix parents
          items:
            type: string
            pattern: '^[a-zA-Z0-9]{5}$'
        startDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
    TermPayload:
      description: Schema de création et de modification d'une représentation d'un terme
      additionalProperties: false
      type: object
      properties:
        usualNameFr:
          type: string
          description: Nom usuel en francais
          nullable: true
        usualNameEn:
          type: string
          description: Nom usuel en anglais
          nullable: true
        pluralNameFr:
          type: string
          description: Forme du nom usuel français au pluriel
          nullable: true
        pluralNameEn:
          type: string
          description: Forme du nom usuel anglais au pluriel
          nullable: true
        shortNameFr:
          type: string
          description: Nom court en français
          nullable: true
        shortNameEn:
          type: string
          description: Nom court en anglais
          nullable: true
        acronymFr:
          type: string
          description: Sigle en français
          nullable: true
        acronymEn:
          type: string
          description: Sigle en anglais
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        descriptionEn:
          type: string
          nullable: true
        otherName:
          type: array
          description: Autres intitulés
          nullable: true
          items:
            type: string
    LegalCategoryPayload:
      title: LegalCategoryPayload
      description: Modèle de création et d'update d'une catégorie juridique
      additionalProperties: false
      type: object
      properties:
        inseeCode:
          type: string
          nullable: true
        longNameFr:
          type: string
        shortNameFr:
          type: string
          nullable: true
        acronymeFr:
          type: string
          nullable: true
        pluralNameFr:
          type: string
          nullable: true
        descriptionFr:
          type: string
          nullable: true
        longNameEn:
          type: string
          nullable: true
        shortNameEn:
          type: string
          nullable: true
        otherNames:
          type: array
          items:
            type: string
        sector:
          type: string
          nullable: true
          enum:
            - public
            - privé
            - sans objet
            - null
        officialDocumentId:
          type: string
          nullable: true
          writeOnly: true
        legalPersonality:
          type: string
          nullable: true
          enum:
            - personne morale de droit public
            - personne morale de droit privé
            - organisation internationale
            - autre forme juridique étrangère
            - sans personalité juridique
            - null
        inPublicResearch:
          type: boolean
          nullable: true
        wikidataId:
          type: string
          nullable: true
        websiteFr:
          type: string
          nullable: true
        websiteEn:
          type: string
          nullable: true
        comment:
          type: string
          nullable: true
    DocumentPayload:
      title: DocumentPayload
      description: Modèle de creation et d'update d'un document
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        file:
          writeOnly: true
          type: string
          format: binary
    OfficialDocumentPayload:
      title: OfficialDocumentPayload
      description: Modèle de création et d'update d'un document officiel
      type: object
      properties:
        nature:
          $ref: '#/components/schemas/OfficialDocumentNaturesEnum'
        type:
          $ref: '#/components/schemas/OfficialDocumentTypesEnum'
        documentNumber:
          type: string
        title:
          type: string
        pageUrl:
          type: string
          format: uri
        signatureDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        startDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        previsionalEndDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          nullable: true
          type: string
          pattern: '((^&)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        textExtract:
          nullable: true
          type: string
        comment:
          nullable: true
          type: string
    LogoPayload:
      title: LogoPayload
      description: Modèle de création et d'update d'un logo
      type: object
      properties:
        legend:
          type: string
          nullable: true
        credits:
          type: string
          nullable: true
        license:
          type: string
          enum:
            - CC BY
            - CC BY-SA
            - CC BY-ND
            - CC BY-NC
            - CC BY-NC-SA
            - CC BY-NC-ND
            - null
          nullable: true
        startDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        endDate:
          type: string
          nullable: true
          pattern: '((^$)|(^\d{4}-?(0[1-9]|1[0-2])?-?(0[1-9]|[12][0-9]|3[01])?$))'
        comment:
          type: string
          nullable: true
        file:
          type: string
          format: binary
    WeblinkPayload:
      title: WeblinkPayload
      description: Représentation d'un lien web
      type: object
      properties:
        type:
          type: string
        url:
          type: string
        language:
          type: string
          nullable: true
    SocialMediaPayload:
      title: SocialMediaPayload
      description: Modèle de création et d'update d'un média social
      type: object
      properties:
        type:
          type: string
        account:
          type: string
    RolePayload:
      title: RolePayload
      description: Ajout et modification d'un rôle
      type: object
      properties:
        generic:
          type: boolean
        longNameFr:
          type: string
        shortNameFr:
          type: string
        acronymFr:
          type: string
        pluralNameFr:
          type: string
        femNameFr:
          type: string
        otherNameFr:
          type: string
        descriptionFr:
          type: string
        longNameEn:
          type: string
        shortNameEn:
          type: string
        otherNameEn:
          type: string
        descriptionEn:
          type: string
        nameFr:
          type: string
        nameEn:
          type: string
    StructureIdentifierTypesEnum:
      description: Valeurs possibles pour un type d'identifiant de structure
      type: string
      enum:
        - Wikidata
        - Identifiant BnF
        - idRef
        - ORCID Id
        - idHal
        - Numéro national de Thèse
        - Univ-droit jurist ID
        - Web of Science Researcher ID
        - UAI
        - Siret
        - GRID
        - dataESR
        - orgref
        - isni
        - fundref
        - OpenCorporates ID
        - PIC (Participant Identification Code)
        - Référence projet PIA (ANR)
        - Identifiant CTI de l'école
        - ROR
        - RNA
        - Id unité CNRS
        - RCR
        - ISIL
        - Numéro d'ED
        - GA OAD
        - Code Insee
    PersonIdentifierTypesEnum:
      description: Valeurs possibles pour un type d'identifiant de personne
      type: string
      enum:
        - Wikidata
        - Identifiant BnF
        - idRef
        - ORCID Id
        - idHal
        - Numéro national de Thèse
        - Univ-droit jurist ID
        - Web of Science Researcher ID
        - UAI
        - Siret
        - GRID
        - dataESR
        - orgref
        - isni
        - fundref
        - OpenCorporates ID
        - PIC (Participant Identification Code)
        - Référence projet PIA (ANR)
        - Identifiant CTI de l'école
        - ROR
        - RNA
        - Id unité CNRS
        - RCR
        - ISIL
        - Numéro d'ED
        - GA OAD
        - Code Insee
    CategoryIdentifierTypesEnum:
      description: Valeurs possibles pour un type d'identifiant de structure
      type: string
      enum:
        - Wikidata
    OfficialDocumentTypesEnum:
      type: string
      enum:
        - Loi
        - Décret
        - Ordonnance
        - Avis de vacance d'emploi
        - Arrêté
        - Circulaire
    OfficialDocumentNaturesEnum:
      type: string
      enum:
        - Publication au JO
        - Publication au BOESR
    Error:
      title: Error
      type: object
      required:
        - error
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              path:
                type: string
              errorCode:
                type: string
    Metas:
      title: Metas
      type: object
      description: Object metadatas
      properties:
        createdBy:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              nullable: true
            username:
              type: string
              nullable: true
            avatar:
              type: string
              format: uri
              nullable: true
        updatedBy:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              nullable: true
            username:
              type: string
              nullable: true
            avatar:
              type: string
              format: uri
              nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Authentication with a Bearer token.
